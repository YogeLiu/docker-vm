// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dms_message.proto

package protogo

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DMSMessageType int32

const (
	DMSMessageType_DMS_MESSAGE_TYPE_UNDEFINED                         DMSMessageType = 0
	DMSMessageType_DMS_MESSAGE_TYPE_REGISTER                          DMSMessageType = 1
	DMSMessageType_DMS_MESSAGE_TYPE_REGISTERED                        DMSMessageType = 2
	DMSMessageType_DMS_MESSAGE_TYPE_PREPARE                           DMSMessageType = 3
	DMSMessageType_DMS_MESSAGE_TYPE_READY                             DMSMessageType = 4
	DMSMessageType_DMS_MESSAGE_TYPE_INIT                              DMSMessageType = 5
	DMSMessageType_DMS_MESSAGE_TYPE_INVOKE                            DMSMessageType = 6
	DMSMessageType_DMS_MESSAGE_TYPE_GET_STATE_REQUEST                 DMSMessageType = 7
	DMSMessageType_DMS_MESSAGE_TYPE_GET_STATE_RESPONSE                DMSMessageType = 8
	DMSMessageType_DMS_MESSAGE_TYPE_CALL_CONTRACT_REQUEST             DMSMessageType = 9
	DMSMessageType_DMS_MESSAGE_TYPE_CALL_CONTRACT_RESPONSE            DMSMessageType = 10
	DMSMessageType_DMS_MESSAGE_TYPE_COMPLETED                         DMSMessageType = 11
	DMSMessageType_DMS_MESSAGE_TYPE_ERROR                             DMSMessageType = 12
	DMSMessageType_DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_REQUEST        DMSMessageType = 13
	DMSMessageType_DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_RESPONSE       DMSMessageType = 14
	DMSMessageType_DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_REQUEST       DMSMessageType = 15
	DMSMessageType_DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_RESPONSE      DMSMessageType = 16
	DMSMessageType_DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_REQUEST   DMSMessageType = 17
	DMSMessageType_DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_RESPONSE  DMSMessageType = 18
	DMSMessageType_DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_REQUEST  DMSMessageType = 19
	DMSMessageType_DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE DMSMessageType = 20
	DMSMessageType_DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_REQUEST        DMSMessageType = 21
	DMSMessageType_DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_RESPONSE       DMSMessageType = 22
	DMSMessageType_DMS_MESSAGE_TYPE_GET_BATCH_STATE_REQUEST           DMSMessageType = 23
	DMSMessageType_DMS_MESSAGE_TYPE_GET_BATCH_STATE_RESPONSE          DMSMessageType = 24
)

var DMSMessageType_name = map[int32]string{
	0:  "DMS_MESSAGE_TYPE_UNDEFINED",
	1:  "DMS_MESSAGE_TYPE_REGISTER",
	2:  "DMS_MESSAGE_TYPE_REGISTERED",
	3:  "DMS_MESSAGE_TYPE_PREPARE",
	4:  "DMS_MESSAGE_TYPE_READY",
	5:  "DMS_MESSAGE_TYPE_INIT",
	6:  "DMS_MESSAGE_TYPE_INVOKE",
	7:  "DMS_MESSAGE_TYPE_GET_STATE_REQUEST",
	8:  "DMS_MESSAGE_TYPE_GET_STATE_RESPONSE",
	9:  "DMS_MESSAGE_TYPE_CALL_CONTRACT_REQUEST",
	10: "DMS_MESSAGE_TYPE_CALL_CONTRACT_RESPONSE",
	11: "DMS_MESSAGE_TYPE_COMPLETED",
	12: "DMS_MESSAGE_TYPE_ERROR",
	13: "DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_REQUEST",
	14: "DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_RESPONSE",
	15: "DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_REQUEST",
	16: "DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_RESPONSE",
	17: "DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_REQUEST",
	18: "DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_RESPONSE",
	19: "DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_REQUEST",
	20: "DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE",
	21: "DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_REQUEST",
	22: "DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_RESPONSE",
	23: "DMS_MESSAGE_TYPE_GET_BATCH_STATE_REQUEST",
	24: "DMS_MESSAGE_TYPE_GET_BATCH_STATE_RESPONSE",
}

var DMSMessageType_value = map[string]int32{
	"DMS_MESSAGE_TYPE_UNDEFINED":                         0,
	"DMS_MESSAGE_TYPE_REGISTER":                          1,
	"DMS_MESSAGE_TYPE_REGISTERED":                        2,
	"DMS_MESSAGE_TYPE_PREPARE":                           3,
	"DMS_MESSAGE_TYPE_READY":                             4,
	"DMS_MESSAGE_TYPE_INIT":                              5,
	"DMS_MESSAGE_TYPE_INVOKE":                            6,
	"DMS_MESSAGE_TYPE_GET_STATE_REQUEST":                 7,
	"DMS_MESSAGE_TYPE_GET_STATE_RESPONSE":                8,
	"DMS_MESSAGE_TYPE_CALL_CONTRACT_REQUEST":             9,
	"DMS_MESSAGE_TYPE_CALL_CONTRACT_RESPONSE":            10,
	"DMS_MESSAGE_TYPE_COMPLETED":                         11,
	"DMS_MESSAGE_TYPE_ERROR":                             12,
	"DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_REQUEST":        13,
	"DMS_MESSAGE_TYPE_CREATE_KV_ITERATOR_RESPONSE":       14,
	"DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_REQUEST":       15,
	"DMS_MESSAGE_TYPE_CONSUME_KV_ITERATOR_RESPONSE":      16,
	"DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_REQUEST":   17,
	"DMS_MESSAGE_TYPE_CREATE_KEY_HISTORY_ITER_RESPONSE":  18,
	"DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_REQUEST":  19,
	"DMS_MESSAGE_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE": 20,
	"DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_REQUEST":        21,
	"DMS_MESSAGE_TYPE_GET_SENDER_ADDRESS_RESPONSE":       22,
	"DMS_MESSAGE_TYPE_GET_BATCH_STATE_REQUEST":           23,
	"DMS_MESSAGE_TYPE_GET_BATCH_STATE_RESPONSE":          24,
}

func (x DMSMessageType) String() string {
	return proto.EnumName(DMSMessageType_name, int32(x))
}

func (DMSMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{0}
}

type DMSMessage struct {
	TxId          string         `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Type          DMSMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.DMSMessageType" json:"type,omitempty"`
	CurrentHeight uint32         `protobuf:"varint,3,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	ResultCode    int32          `protobuf:"varint,4,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	Payload       []byte         `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Message       string         `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DMSMessage) Reset()         { *m = DMSMessage{} }
func (m *DMSMessage) String() string { return proto.CompactTextString(m) }
func (*DMSMessage) ProtoMessage()    {}
func (*DMSMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{0}
}
func (m *DMSMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DMSMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DMSMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DMSMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMSMessage.Merge(m, src)
}
func (m *DMSMessage) XXX_Size() int {
	return m.Size()
}
func (m *DMSMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DMSMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DMSMessage proto.InternalMessageInfo

func (m *DMSMessage) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *DMSMessage) GetType() DMSMessageType {
	if m != nil {
		return m.Type
	}
	return DMSMessageType_DMS_MESSAGE_TYPE_UNDEFINED
}

func (m *DMSMessage) GetCurrentHeight() uint32 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *DMSMessage) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *DMSMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DMSMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// --------------------  request message ---------------------
type Input struct {
	Args map[string][]byte `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{1}
}
func (m *Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(m, src)
}
func (m *Input) XXX_Size() int {
	return m.Size()
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetArgs() map[string][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type CallContractRequest struct {
	ContractName    string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string `protobuf:"bytes,2,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// args
	Args map[string][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CallContractRequest) Reset()         { *m = CallContractRequest{} }
func (m *CallContractRequest) String() string { return proto.CompactTextString(m) }
func (*CallContractRequest) ProtoMessage()    {}
func (*CallContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{2}
}
func (m *CallContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallContractRequest.Merge(m, src)
}
func (m *CallContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *CallContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CallContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CallContractRequest proto.InternalMessageInfo

func (m *CallContractRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *CallContractRequest) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *CallContractRequest) GetArgs() map[string][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

// user method response
type Response struct {
	// A status code that should follow the HTTP status codes.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// A message associated with the response code. error has message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A payload that can be used to include metadata with this response. success with payload
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// real user contract response
type ContractResponse struct {
	// always has response
	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	// always has write map
	WriteMap map[string][]byte `protobuf:"bytes,2,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// only cross contracts has read map
	ReadMap map[string][]byte `protobuf:"bytes,3,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// always has events
	Events []*Event `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *ContractResponse) Reset()         { *m = ContractResponse{} }
func (m *ContractResponse) String() string { return proto.CompactTextString(m) }
func (*ContractResponse) ProtoMessage()    {}
func (*ContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{4}
}
func (m *ContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractResponse.Merge(m, src)
}
func (m *ContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContractResponse proto.InternalMessageInfo

func (m *ContractResponse) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ContractResponse) GetWriteMap() map[string][]byte {
	if m != nil {
		return m.WriteMap
	}
	return nil
}

func (m *ContractResponse) GetReadMap() map[string][]byte {
	if m != nil {
		return m.ReadMap
	}
	return nil
}

func (m *ContractResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Event struct {
	// Event topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Event contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Event contract version
	ContractVersion string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// Event payload
	Data []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{5}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *Event) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *Event) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type BatchKey struct {
	Key          string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Field        string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value        []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ContractName string `protobuf:"bytes,4,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
}

func (m *BatchKey) Reset()         { *m = BatchKey{} }
func (m *BatchKey) String() string { return proto.CompactTextString(m) }
func (*BatchKey) ProtoMessage()    {}
func (*BatchKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{6}
}
func (m *BatchKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchKey.Merge(m, src)
}
func (m *BatchKey) XXX_Size() int {
	return m.Size()
}
func (m *BatchKey) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchKey.DiscardUnknown(m)
}

var xxx_messageInfo_BatchKey proto.InternalMessageInfo

func (m *BatchKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BatchKey) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *BatchKey) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BatchKey) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

type BatchKeys struct {
	Keys []*BatchKey `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
}

func (m *BatchKeys) Reset()         { *m = BatchKeys{} }
func (m *BatchKeys) String() string { return proto.CompactTextString(m) }
func (*BatchKeys) ProtoMessage()    {}
func (*BatchKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{7}
}
func (m *BatchKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchKeys.Merge(m, src)
}
func (m *BatchKeys) XXX_Size() int {
	return m.Size()
}
func (m *BatchKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchKeys.DiscardUnknown(m)
}

var xxx_messageInfo_BatchKeys proto.InternalMessageInfo

func (m *BatchKeys) GetKeys() []*BatchKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Keys struct {
	Key []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
}

func (m *Keys) Reset()         { *m = Keys{} }
func (m *Keys) String() string { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()    {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f090dc9f7ea29b6, []int{8}
}
func (m *Keys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(m, src)
}
func (m *Keys) XXX_Size() int {
	return m.Size()
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.DMSMessageType", DMSMessageType_name, DMSMessageType_value)
	proto.RegisterType((*DMSMessage)(nil), "proto.DMSMessage")
	proto.RegisterType((*Input)(nil), "proto.Input")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.Input.ArgsEntry")
	proto.RegisterType((*CallContractRequest)(nil), "proto.CallContractRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.CallContractRequest.ArgsEntry")
	proto.RegisterType((*Response)(nil), "proto.Response")
	proto.RegisterType((*ContractResponse)(nil), "proto.ContractResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.ContractResponse.ReadMapEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.ContractResponse.WriteMapEntry")
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterType((*BatchKey)(nil), "proto.BatchKey")
	proto.RegisterType((*BatchKeys)(nil), "proto.BatchKeys")
	proto.RegisterType((*Keys)(nil), "proto.Keys")
}

func init() { proto.RegisterFile("dms_message.proto", fileDescriptor_9f090dc9f7ea29b6) }

var fileDescriptor_9f090dc9f7ea29b6 = []byte{
	// 1009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x53, 0xdb, 0x46,
	0x14, 0x46, 0xbe, 0x61, 0x1f, 0x0c, 0x88, 0x25, 0x10, 0xc5, 0x69, 0x1d, 0x8f, 0xc9, 0xc5, 0x40,
	0xb8, 0x84, 0xde, 0x32, 0xe4, 0xa1, 0x63, 0xac, 0x2d, 0x78, 0xc0, 0x36, 0x5d, 0x09, 0x3a, 0xf4,
	0x45, 0xa3, 0x58, 0x5b, 0xe3, 0xc1, 0xb6, 0x54, 0x69, 0x4d, 0xc2, 0x63, 0xff, 0x41, 0x7f, 0x48,
	0x7f, 0x48, 0x1e, 0xf3, 0x98, 0xc7, 0x0e, 0xfc, 0x91, 0x8e, 0x56, 0x2b, 0x1b, 0x90, 0x68, 0x61,
	0xa6, 0x4f, 0xda, 0x73, 0xf9, 0xce, 0xf7, 0x9d, 0x73, 0xd6, 0x3b, 0x86, 0x39, 0xab, 0xef, 0x19,
	0x7d, 0xea, 0x79, 0x66, 0x87, 0xae, 0x3b, 0xae, 0xcd, 0x6c, 0x94, 0xe6, 0x9f, 0xf2, 0x27, 0x09,
	0x40, 0x6d, 0x68, 0x8d, 0x20, 0x86, 0xe6, 0x21, 0xcd, 0x3e, 0x1a, 0x5d, 0x4b, 0x91, 0x4a, 0x52,
	0x25, 0x47, 0x52, 0xec, 0x63, 0xdd, 0x42, 0xcb, 0x90, 0x62, 0x17, 0x0e, 0x55, 0x12, 0x25, 0xa9,
	0x32, 0xb3, 0xb5, 0x10, 0x14, 0x58, 0x1f, 0xa3, 0xf4, 0x0b, 0x87, 0x12, 0x9e, 0x82, 0x5e, 0xc0,
	0x4c, 0x7b, 0xe8, 0xba, 0x74, 0xc0, 0x8c, 0x53, 0xda, 0xed, 0x9c, 0x32, 0x25, 0x59, 0x92, 0x2a,
	0xd3, 0x64, 0x5a, 0x78, 0xf7, 0xb8, 0x13, 0x3d, 0x83, 0x29, 0x97, 0x7a, 0xc3, 0x1e, 0x33, 0xda,
	0xb6, 0x45, 0x95, 0x54, 0x49, 0xaa, 0xa4, 0x09, 0x04, 0xae, 0x9a, 0x6d, 0x51, 0xa4, 0xc0, 0xa4,
	0x63, 0x5e, 0xf4, 0x6c, 0xd3, 0x52, 0xd2, 0x25, 0xa9, 0x92, 0x27, 0xa1, 0xe9, 0x47, 0x44, 0x23,
	0x4a, 0x86, 0x6b, 0x0c, 0xcd, 0x72, 0x0f, 0xd2, 0xf5, 0x81, 0x33, 0x64, 0x68, 0x05, 0x52, 0xa6,
	0xdb, 0xf1, 0x14, 0xa9, 0x94, 0xac, 0x4c, 0x6d, 0x2d, 0x0a, 0xbd, 0x3c, 0xb6, 0x5e, 0x75, 0x3b,
	0x1e, 0x1e, 0x30, 0xf7, 0x82, 0xf0, 0x9c, 0xc2, 0x0f, 0x90, 0x1b, 0xb9, 0x90, 0x0c, 0xc9, 0x33,
	0x7a, 0x21, 0x7a, 0xf7, 0x8f, 0xe8, 0x11, 0xa4, 0xcf, 0xcd, 0xde, 0x30, 0xe8, 0x3d, 0x4f, 0x02,
	0x63, 0x3b, 0xf1, 0x56, 0x2a, 0x7f, 0x91, 0x60, 0xbe, 0x66, 0xf6, 0x7a, 0x35, 0x7b, 0xc0, 0x5c,
	0xb3, 0xcd, 0x08, 0xfd, 0x7d, 0x48, 0x3d, 0x86, 0x96, 0x60, 0xba, 0x2d, 0x5c, 0xc6, 0xc0, 0xec,
	0x53, 0x51, 0x2d, 0x1f, 0x3a, 0x9b, 0x66, 0x9f, 0xa2, 0x65, 0x90, 0x47, 0x49, 0xe7, 0xd4, 0xf5,
	0xba, 0xf6, 0x80, 0x33, 0xe4, 0xc8, 0x6c, 0xe8, 0x3f, 0x0e, 0xdc, 0xe8, 0xad, 0x68, 0x26, 0xc9,
	0x9b, 0x79, 0x2e, 0x9a, 0x89, 0x61, 0xfe, 0xff, 0x5a, 0x3b, 0x86, 0x2c, 0xa1, 0x9e, 0x63, 0x0f,
	0x3c, 0x8a, 0x16, 0x21, 0xe3, 0x31, 0x93, 0x0d, 0x3d, 0x0e, 0x4d, 0x13, 0x61, 0x5d, 0x5f, 0x43,
	0xe2, 0xc6, 0x1a, 0xae, 0xaf, 0x2e, 0x79, 0x63, 0x75, 0xe5, 0xab, 0x04, 0xc8, 0x63, 0xd1, 0x82,
	0x60, 0x15, 0xb2, 0xae, 0x38, 0x73, 0x8a, 0xa9, 0xad, 0x59, 0xd1, 0x63, 0x98, 0x42, 0x46, 0x09,
	0x68, 0x07, 0x72, 0x1f, 0xdc, 0x2e, 0xa3, 0x46, 0xdf, 0x74, 0x94, 0x04, 0x9f, 0xc8, 0x8b, 0x70,
	0x22, 0xb7, 0x0a, 0xaf, 0xff, 0xe2, 0x27, 0x36, 0x4c, 0x27, 0x18, 0x49, 0xf6, 0x83, 0x30, 0xd1,
	0x8f, 0x3e, 0xa1, 0x69, 0xf1, 0x12, 0xb7, 0x86, 0x7a, 0xbb, 0x04, 0xa1, 0xa6, 0x35, 0xaa, 0x30,
	0xe9, 0x06, 0x16, 0x7a, 0x0e, 0x19, 0x7a, 0x4e, 0x07, 0xcc, 0x53, 0x52, 0x1c, 0x9e, 0x17, 0x70,
	0xec, 0x3b, 0x89, 0x88, 0x15, 0xde, 0xc1, 0xf4, 0x0d, 0x05, 0x0f, 0xd9, 0x40, 0x61, 0x1b, 0xf2,
	0xd7, 0xb9, 0x1f, 0xb4, 0xbd, 0x3f, 0x24, 0x48, 0x73, 0x29, 0x7e, 0x0e, 0xb3, 0x9d, 0x6e, 0x5b,
	0xe0, 0x02, 0x23, 0x7a, 0x41, 0x13, 0xf7, 0xbc, 0xa0, 0xc9, 0xf8, 0x0b, 0x8a, 0x20, 0x65, 0x99,
	0xcc, 0xe4, 0xc3, 0xc8, 0x11, 0x7e, 0x2e, 0xf7, 0x21, 0xbb, 0x63, 0xb2, 0xf6, 0xe9, 0x3e, 0xbd,
	0x43, 0xfb, 0x6f, 0x5d, 0xda, 0xb3, 0x04, 0x73, 0x60, 0x8c, 0x3b, 0x4a, 0x5e, 0xeb, 0x28, 0xaa,
	0x36, 0x15, 0x55, 0x5b, 0xde, 0x84, 0x5c, 0x48, 0xe7, 0xa1, 0x25, 0x48, 0xf9, 0x5f, 0xf1, 0xeb,
	0x0f, 0x2f, 0x53, 0x18, 0x27, 0x3c, 0x58, 0x56, 0x82, 0xa4, 0xb1, 0xb8, 0xa4, 0x10, 0xb7, 0xf2,
	0x57, 0x16, 0x66, 0x6e, 0x3e, 0x6d, 0xa8, 0x08, 0x05, 0xb5, 0xa1, 0x19, 0x0d, 0xac, 0x69, 0xd5,
	0x5d, 0x6c, 0xe8, 0x27, 0x87, 0xd8, 0x38, 0x6a, 0xaa, 0xf8, 0xa7, 0x7a, 0x13, 0xab, 0xf2, 0x04,
	0xfa, 0x1a, 0x9e, 0x44, 0xe2, 0x04, 0xef, 0xd6, 0x35, 0x1d, 0x13, 0x59, 0x42, 0xcf, 0xe0, 0xe9,
	0x9d, 0x61, 0xac, 0xca, 0x09, 0xf4, 0x15, 0x28, 0x91, 0x84, 0x43, 0x82, 0x0f, 0xab, 0x04, 0xcb,
	0x49, 0x54, 0x80, 0xc5, 0x18, 0x78, 0x55, 0x3d, 0x91, 0x53, 0xe8, 0x09, 0x2c, 0x44, 0x62, 0xf5,
	0x66, 0x5d, 0x97, 0xd3, 0xe8, 0x29, 0x3c, 0x8e, 0x09, 0x1d, 0xb7, 0xf6, 0xb1, 0x9c, 0x41, 0x2f,
	0xa1, 0x1c, 0x09, 0xee, 0x62, 0xdd, 0xd0, 0xf4, 0xaa, 0xee, 0x57, 0xff, 0xf9, 0x08, 0x6b, 0xba,
	0x3c, 0x89, 0x5e, 0xc1, 0xd2, 0xbf, 0xe6, 0x69, 0x87, 0xad, 0xa6, 0x86, 0xe5, 0x2c, 0x5a, 0x81,
	0x97, 0x91, 0xc4, 0x5a, 0xf5, 0xe0, 0xc0, 0xa8, 0xb5, 0x9a, 0x3a, 0xa9, 0xd6, 0xf4, 0x51, 0xd1,
	0x1c, 0x5a, 0x85, 0x57, 0xff, 0x99, 0x2b, 0x0a, 0x43, 0xec, 0xec, 0x6b, 0xad, 0xc6, 0xe1, 0x01,
	0xd6, 0xb1, 0x2a, 0x4f, 0xc5, 0x4e, 0x07, 0x13, 0xd2, 0x22, 0x72, 0x1e, 0x6d, 0xc0, 0x6a, 0x14,
	0x4b, 0xb0, 0x2f, 0x7d, 0xff, 0xd8, 0xa8, 0xeb, 0x98, 0x54, 0xf5, 0x16, 0x19, 0x29, 0x9b, 0x46,
	0x9b, 0xf0, 0xfa, 0x7e, 0x00, 0x21, 0x6f, 0x26, 0x1e, 0xd1, 0x6a, 0x6a, 0x47, 0x8d, 0x78, 0x8e,
	0x59, 0xf4, 0x06, 0xd6, 0xee, 0x89, 0x10, 0x24, 0x32, 0xfa, 0x16, 0x36, 0xef, 0x94, 0x85, 0x4f,
	0x8c, 0xbd, 0xba, 0xa6, 0xb7, 0xc8, 0x09, 0x87, 0x8e, 0x88, 0xe6, 0xd0, 0x77, 0xf0, 0xe6, 0x01,
	0x28, 0x41, 0x86, 0xe2, 0x61, 0xa1, 0xbe, 0xbb, 0xd8, 0xe6, 0xd1, 0xf7, 0xb0, 0xf5, 0x10, 0x98,
	0xa0, 0x7b, 0x14, 0xbb, 0x23, 0x7e, 0xc3, 0x70, 0x53, 0xc5, 0xc4, 0xa8, 0xaa, 0x2a, 0xc1, 0x9a,
	0x36, 0x22, 0x5a, 0x88, 0x9d, 0x78, 0x2c, 0x40, 0x50, 0x2c, 0xa2, 0xd7, 0x50, 0x89, 0x45, 0xec,
	0x54, 0xf5, 0xda, 0xde, 0xad, 0x2b, 0xff, 0x18, 0xad, 0xc1, 0xf2, 0x3d, 0xb2, 0x45, 0x71, 0x65,
	0x4b, 0x85, 0x8c, 0xda, 0xd0, 0x88, 0xd3, 0x46, 0xdb, 0xfc, 0xdd, 0xa8, 0xd9, 0xfd, 0xfe, 0x70,
	0xd0, 0x6d, 0x9b, 0x8c, 0xa2, 0xb9, 0xc8, 0x3f, 0xa5, 0x42, 0xd4, 0x55, 0x91, 0x36, 0xa5, 0x9d,
	0xa3, 0x4f, 0x97, 0x45, 0xe9, 0xf3, 0x65, 0x51, 0xfa, 0xfb, 0xb2, 0x28, 0xfd, 0x79, 0x55, 0x9c,
	0xf8, 0x7c, 0x55, 0x9c, 0xf8, 0x72, 0x55, 0x9c, 0xf8, 0xf5, 0x5d, 0xfb, 0xd4, 0xec, 0x0e, 0xfa,
	0xe6, 0x19, 0x75, 0xd7, 0x6d, 0xb7, 0xb3, 0x31, 0x36, 0xd7, 0xc2, 0x27, 0x70, 0xcd, 0xb3, 0xce,
	0xd6, 0x2c, 0xbb, 0xed, 0xfb, 0x3a, 0xf6, 0x86, 0xf3, 0x7e, 0x83, 0x73, 0x74, 0xec, 0xf7, 0x19,
	0x7e, 0xf8, 0xe6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x6d, 0x3d, 0xde, 0xff, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DMSRpcClient is the client API for DMSRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMSRpcClient interface {
	DMSCommunicate(ctx context.Context, opts ...grpc.CallOption) (DMSRpc_DMSCommunicateClient, error)
}

type dMSRpcClient struct {
	cc *grpc.ClientConn
}

func NewDMSRpcClient(cc *grpc.ClientConn) DMSRpcClient {
	return &dMSRpcClient{cc}
}

func (c *dMSRpcClient) DMSCommunicate(ctx context.Context, opts ...grpc.CallOption) (DMSRpc_DMSCommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DMSRpc_serviceDesc.Streams[0], "/proto.DMSRpc/DMSCommunicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dMSRpcDMSCommunicateClient{stream}
	return x, nil
}

type DMSRpc_DMSCommunicateClient interface {
	Send(*DMSMessage) error
	Recv() (*DMSMessage, error)
	grpc.ClientStream
}

type dMSRpcDMSCommunicateClient struct {
	grpc.ClientStream
}

func (x *dMSRpcDMSCommunicateClient) Send(m *DMSMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dMSRpcDMSCommunicateClient) Recv() (*DMSMessage, error) {
	m := new(DMSMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DMSRpcServer is the server API for DMSRpc service.
type DMSRpcServer interface {
	DMSCommunicate(DMSRpc_DMSCommunicateServer) error
}

// UnimplementedDMSRpcServer can be embedded to have forward compatible implementations.
type UnimplementedDMSRpcServer struct {
}

func (*UnimplementedDMSRpcServer) DMSCommunicate(srv DMSRpc_DMSCommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method DMSCommunicate not implemented")
}

func RegisterDMSRpcServer(s *grpc.Server, srv DMSRpcServer) {
	s.RegisterService(&_DMSRpc_serviceDesc, srv)
}

func _DMSRpc_DMSCommunicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DMSRpcServer).DMSCommunicate(&dMSRpcDMSCommunicateServer{stream})
}

type DMSRpc_DMSCommunicateServer interface {
	Send(*DMSMessage) error
	Recv() (*DMSMessage, error)
	grpc.ServerStream
}

type dMSRpcDMSCommunicateServer struct {
	grpc.ServerStream
}

func (x *dMSRpcDMSCommunicateServer) Send(m *DMSMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dMSRpcDMSCommunicateServer) Recv() (*DMSMessage, error) {
	m := new(DMSMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DMSRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DMSRpc",
	HandlerType: (*DMSRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DMSCommunicate",
			Handler:       _DMSRpc_DMSCommunicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dms_message.proto",
}

func (m *DMSMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DMSMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DMSMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResultCode != 0 {
		i = encodeVarintDmsMessage(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintDmsMessage(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintDmsMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintDmsMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDmsMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CallContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintDmsMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDmsMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintDmsMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDmsMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReadMap) > 0 {
		for k := range m.ReadMap {
			v := m.ReadMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintDmsMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDmsMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WriteMap) > 0 {
		for k := range m.WriteMap {
			v := m.WriteMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintDmsMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDmsMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDmsMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDmsMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Keys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		for iNdEx := len(m.Key) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Key[iNdEx])
			copy(dAtA[i:], m.Key[iNdEx])
			i = encodeVarintDmsMessage(dAtA, i, uint64(len(m.Key[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDmsMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovDmsMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DMSMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovDmsMessage(uint64(m.Type))
	}
	if m.CurrentHeight != 0 {
		n += 1 + sovDmsMessage(uint64(m.CurrentHeight))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDmsMessage(uint64(m.ResultCode))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	return n
}

func (m *Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovDmsMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovDmsMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDmsMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CallContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovDmsMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovDmsMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDmsMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovDmsMessage(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	return n
}

func (m *ContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	if len(m.WriteMap) > 0 {
		for k, v := range m.WriteMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovDmsMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovDmsMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDmsMessage(uint64(mapEntrySize))
		}
	}
	if len(m.ReadMap) > 0 {
		for k, v := range m.ReadMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovDmsMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovDmsMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDmsMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovDmsMessage(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovDmsMessage(uint64(l))
		}
	}
	return n
}

func (m *BatchKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovDmsMessage(uint64(l))
	}
	return n
}

func (m *BatchKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovDmsMessage(uint64(l))
		}
	}
	return n
}

func (m *Keys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Key) > 0 {
		for _, s := range m.Key {
			l = len(s)
			n += 1 + l + sovDmsMessage(uint64(l))
		}
	}
	return n
}

func sovDmsMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDmsMessage(x uint64) (n int) {
	return sovDmsMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DMSMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DMSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DMSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DMSMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDmsMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDmsMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDmsMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDmsMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &Response{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteMap == nil {
				m.WriteMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDmsMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDmsMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WriteMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadMap == nil {
				m.ReadMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDmsMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDmsMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthDmsMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDmsMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDmsMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReadMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &BatchKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDmsMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDmsMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDmsMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDmsMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDmsMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDmsMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDmsMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDmsMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDmsMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDmsMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDmsMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDmsMessage = fmt.Errorf("proto: unexpected end of group")
)
