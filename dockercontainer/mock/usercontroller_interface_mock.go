// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol/usercontroller_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	security "chainmaker.org/chainmaker-go/docker-go/dockercontainer/module/security"
	gomock "github.com/golang/mock/gomock"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// FreeUser mocks base method.
func (m *MockUserController) FreeUser(user *security.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeUser indicates an expected call of FreeUser.
func (mr *MockUserControllerMockRecorder) FreeUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeUser", reflect.TypeOf((*MockUserController)(nil).FreeUser), user)
}

// GetAvailableUser mocks base method.
func (m *MockUserController) GetAvailableUser() (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableUser")
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableUser indicates an expected call of GetAvailableUser.
func (mr *MockUserControllerMockRecorder) GetAvailableUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableUser", reflect.TypeOf((*MockUserController)(nil).GetAvailableUser))
}
