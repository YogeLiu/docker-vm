// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol/scheduler_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	protogo "chainmaker.org/chainmaker-go/docker-go/dockercontainer/pb/protogo"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// GetGetByteCodeReqCh mocks base method.
func (m *MockScheduler) GetGetByteCodeReqCh() chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGetByteCodeReqCh")
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetGetByteCodeReqCh indicates an expected call of GetGetByteCodeReqCh.
func (mr *MockSchedulerMockRecorder) GetGetByteCodeReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGetByteCodeReqCh", reflect.TypeOf((*MockScheduler)(nil).GetGetByteCodeReqCh))
}

// GetGetStateReqCh mocks base method.
func (m *MockScheduler) GetGetStateReqCh() chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGetStateReqCh")
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetGetStateReqCh indicates an expected call of GetGetStateReqCh.
func (mr *MockSchedulerMockRecorder) GetGetStateReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGetStateReqCh", reflect.TypeOf((*MockScheduler)(nil).GetGetStateReqCh))
}

// GetResponseChByTxId mocks base method.
func (m *MockScheduler) GetResponseChByTxId(txId string) chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseChByTxId", txId)
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetResponseChByTxId indicates an expected call of GetResponseChByTxId.
func (mr *MockSchedulerMockRecorder) GetResponseChByTxId(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseChByTxId", reflect.TypeOf((*MockScheduler)(nil).GetResponseChByTxId), txId)
}

// GetTxReqCh mocks base method.
func (m *MockScheduler) GetTxReqCh() chan *protogo.TxRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxReqCh")
	ret0, _ := ret[0].(chan *protogo.TxRequest)
	return ret0
}

// GetTxReqCh indicates an expected call of GetTxReqCh.
func (mr *MockSchedulerMockRecorder) GetTxReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxReqCh", reflect.TypeOf((*MockScheduler)(nil).GetTxReqCh))
}

// GetTxResponseCh mocks base method.
func (m *MockScheduler) GetTxResponseCh() chan *protogo.TxResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxResponseCh")
	ret0, _ := ret[0].(chan *protogo.TxResponse)
	return ret0
}

// GetTxResponseCh indicates an expected call of GetTxResponseCh.
func (mr *MockSchedulerMockRecorder) GetTxResponseCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxResponseCh", reflect.TypeOf((*MockScheduler)(nil).GetTxResponseCh))
}

// RegisterResponseCh mocks base method.
func (m *MockScheduler) RegisterResponseCh(txId string, responseCh chan *protogo.CDMMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterResponseCh", txId, responseCh)
}

// RegisterResponseCh indicates an expected call of RegisterResponseCh.
func (mr *MockSchedulerMockRecorder) RegisterResponseCh(txId, responseCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResponseCh", reflect.TypeOf((*MockScheduler)(nil).RegisterResponseCh), txId, responseCh)
}
