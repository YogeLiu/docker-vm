// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: dockervm_message.proto

package protogo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DockerVMType int32

const (
	DockerVMType_UNDEFINED                         DockerVMType = 0
	DockerVMType_REGISTER                          DockerVMType = 1
	DockerVMType_REGISTERED                        DockerVMType = 2
	DockerVMType_PREPARE                           DockerVMType = 3
	DockerVMType_READY                             DockerVMType = 4
	DockerVMType_INIT                              DockerVMType = 5
	DockerVMType_INVOKE                            DockerVMType = 6
	DockerVMType_TX_REQUEST                        DockerVMType = 7
	DockerVMType_TX_RESPONSE                       DockerVMType = 8
	DockerVMType_GET_STATE_REQUEST                 DockerVMType = 9
	DockerVMType_GET_STATE_RESPONSE                DockerVMType = 10
	DockerVMType_GET_BYTECODE_REQUEST              DockerVMType = 11
	DockerVMType_GET_BYTECODE_RESPONSE             DockerVMType = 12
	DockerVMType_CALL_CONTRACT_REQUEST             DockerVMType = 13
	DockerVMType_CALL_CONTRACT_RESPONSE            DockerVMType = 14
	DockerVMType_COMPLETED                         DockerVMType = 15
	DockerVMType_ERROR                             DockerVMType = 16
	DockerVMType_CREATE_KV_ITERATOR_REQUEST        DockerVMType = 17
	DockerVMType_CREATE_KV_ITERATOR_RESPONSE       DockerVMType = 18
	DockerVMType_CONSUME_KV_ITERATOR_REQUEST       DockerVMType = 19
	DockerVMType_CONSUME_KV_ITERATOR_RESPONSE      DockerVMType = 20
	DockerVMType_CREATE_KEY_HISTORY_ITER_REQUEST   DockerVMType = 21
	DockerVMType_CREATE_KEY_HISTORY_TER_RESPONSE   DockerVMType = 22
	DockerVMType_CONSUME_KEY_HISTORY_ITER_REQUEST  DockerVMType = 23
	DockerVMType_CONSUME_KEY_HISTORY_ITER_RESPONSE DockerVMType = 24
	DockerVMType_GET_SENDER_ADDRESS_REQUEST        DockerVMType = 25
	DockerVMType_GET_SENDER_ADDRESS_RESPONSE       DockerVMType = 26
	DockerVMType_GET_BATCH_STATE_REQUEST           DockerVMType = 27
	DockerVMType_GET_BATCH_STATE_RESPONSE          DockerVMType = 28
)

// Enum value maps for DockerVMType.
var (
	DockerVMType_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "REGISTER",
		2:  "REGISTERED",
		3:  "PREPARE",
		4:  "READY",
		5:  "INIT",
		6:  "INVOKE",
		7:  "TX_REQUEST",
		8:  "TX_RESPONSE",
		9:  "GET_STATE_REQUEST",
		10: "GET_STATE_RESPONSE",
		11: "GET_BYTECODE_REQUEST",
		12: "GET_BYTECODE_RESPONSE",
		13: "CALL_CONTRACT_REQUEST",
		14: "CALL_CONTRACT_RESPONSE",
		15: "COMPLETED",
		16: "ERROR",
		17: "CREATE_KV_ITERATOR_REQUEST",
		18: "CREATE_KV_ITERATOR_RESPONSE",
		19: "CONSUME_KV_ITERATOR_REQUEST",
		20: "CONSUME_KV_ITERATOR_RESPONSE",
		21: "CREATE_KEY_HISTORY_ITER_REQUEST",
		22: "CREATE_KEY_HISTORY_TER_RESPONSE",
		23: "CONSUME_KEY_HISTORY_ITER_REQUEST",
		24: "CONSUME_KEY_HISTORY_ITER_RESPONSE",
		25: "GET_SENDER_ADDRESS_REQUEST",
		26: "GET_SENDER_ADDRESS_RESPONSE",
		27: "GET_BATCH_STATE_REQUEST",
		28: "GET_BATCH_STATE_RESPONSE",
	}
	DockerVMType_value = map[string]int32{
		"UNDEFINED":                         0,
		"REGISTER":                          1,
		"REGISTERED":                        2,
		"PREPARE":                           3,
		"READY":                             4,
		"INIT":                              5,
		"INVOKE":                            6,
		"TX_REQUEST":                        7,
		"TX_RESPONSE":                       8,
		"GET_STATE_REQUEST":                 9,
		"GET_STATE_RESPONSE":                10,
		"GET_BYTECODE_REQUEST":              11,
		"GET_BYTECODE_RESPONSE":             12,
		"CALL_CONTRACT_REQUEST":             13,
		"CALL_CONTRACT_RESPONSE":            14,
		"COMPLETED":                         15,
		"ERROR":                             16,
		"CREATE_KV_ITERATOR_REQUEST":        17,
		"CREATE_KV_ITERATOR_RESPONSE":       18,
		"CONSUME_KV_ITERATOR_REQUEST":       19,
		"CONSUME_KV_ITERATOR_RESPONSE":      20,
		"CREATE_KEY_HISTORY_ITER_REQUEST":   21,
		"CREATE_KEY_HISTORY_TER_RESPONSE":   22,
		"CONSUME_KEY_HISTORY_ITER_REQUEST":  23,
		"CONSUME_KEY_HISTORY_ITER_RESPONSE": 24,
		"GET_SENDER_ADDRESS_REQUEST":        25,
		"GET_SENDER_ADDRESS_RESPONSE":       26,
		"GET_BATCH_STATE_REQUEST":           27,
		"GET_BATCH_STATE_RESPONSE":          28,
	}
)

func (x DockerVMType) Enum() *DockerVMType {
	p := new(DockerVMType)
	*p = x
	return p
}

func (x DockerVMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockerVMType) Descriptor() protoreflect.EnumDescriptor {
	return file_dockervm_message_proto_enumTypes[0].Descriptor()
}

func (DockerVMType) Type() protoreflect.EnumType {
	return &file_dockervm_message_proto_enumTypes[0]
}

func (x DockerVMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockerVMType.Descriptor instead.
func (DockerVMType) EnumDescriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{0}
}

type StepType int32

const (
	StepType_RUNTIME_PREPARE_TX_REQUEST          StepType = 0
	StepType_RUNTIME_GRPC_SEND_TX_REQUEST        StepType = 1
	StepType_ENGINE_GRPC_RECEIVE_TX_REQUEST      StepType = 2
	StepType_ENGINE_SCHEDULER_RECEIVE_TX_REQUEST StepType = 3
	StepType_ENGINE_SCHEDULER_SEND_TX_REQUEST    StepType = 4
	StepType_ENGINE_GROUP_RECEIVE_TX_REQUEST     StepType = 5
	StepType_ENGINE_GROUP_SEND_TX_REQUEST        StepType = 6
	StepType_ENGINE_PROCESS_RECEIVE_TX_REQUEST   StepType = 7
	StepType_ENGINE_PROCESS_SEND_TX_REQUEST      StepType = 8
	StepType_ENGINE_PROCESS_RECEIVE_TX_RESPONSE  StepType = 9
	StepType_SANDBOX_GRPC_RECEIVE_TX_REQUEST     StepType = 10
	StepType_SANDBOX_GRPC_SEND_TX_REQUEST        StepType = 11
	StepType_SANDBOX_CHAN_SEND_TX_REQUEST        StepType = 12
	StepType_SANDBOX_HANDLER_RECEIVE_TX_REQUEST  StepType = 13
	StepType_SANDBOX_HANDLER_EXECUTE             StepType = 14
	StepType_SANDBOX_SEND_CHAIN_RESP             StepType = 15
	StepType_SANDBOX_GRPC_SEND_CHAIN_RESP        StepType = 16
	StepType_SANDBOX_SEND_ENGINE_RESP            StepType = 17
	StepType_RUNTIME_GRPC_RECEIVE_TX_RESPONSE    StepType = 18
	StepType_RUNTIME_GET_NOTIFY_TX_RESPONSE      StepType = 19
	StepType_RUNTIME_HANDLER_RECEIVE_TX_RESPONSE StepType = 20
	StepType_RUNTIME_HANDLE_TX_RESPONSE          StepType = 21
)

// Enum value maps for StepType.
var (
	StepType_name = map[int32]string{
		0:  "RUNTIME_PREPARE_TX_REQUEST",
		1:  "RUNTIME_GRPC_SEND_TX_REQUEST",
		2:  "ENGINE_GRPC_RECEIVE_TX_REQUEST",
		3:  "ENGINE_SCHEDULER_RECEIVE_TX_REQUEST",
		4:  "ENGINE_SCHEDULER_SEND_TX_REQUEST",
		5:  "ENGINE_GROUP_RECEIVE_TX_REQUEST",
		6:  "ENGINE_GROUP_SEND_TX_REQUEST",
		7:  "ENGINE_PROCESS_RECEIVE_TX_REQUEST",
		8:  "ENGINE_PROCESS_SEND_TX_REQUEST",
		9:  "ENGINE_PROCESS_RECEIVE_TX_RESPONSE",
		10: "SANDBOX_GRPC_RECEIVE_TX_REQUEST",
		11: "SANDBOX_GRPC_SEND_TX_REQUEST",
		12: "SANDBOX_CHAN_SEND_TX_REQUEST",
		13: "SANDBOX_HANDLER_RECEIVE_TX_REQUEST",
		14: "SANDBOX_HANDLER_EXECUTE",
		15: "SANDBOX_SEND_CHAIN_RESP",
		16: "SANDBOX_GRPC_SEND_CHAIN_RESP",
		17: "SANDBOX_SEND_ENGINE_RESP",
		18: "RUNTIME_GRPC_RECEIVE_TX_RESPONSE",
		19: "RUNTIME_GET_NOTIFY_TX_RESPONSE",
		20: "RUNTIME_HANDLER_RECEIVE_TX_RESPONSE",
		21: "RUNTIME_HANDLE_TX_RESPONSE",
	}
	StepType_value = map[string]int32{
		"RUNTIME_PREPARE_TX_REQUEST":          0,
		"RUNTIME_GRPC_SEND_TX_REQUEST":        1,
		"ENGINE_GRPC_RECEIVE_TX_REQUEST":      2,
		"ENGINE_SCHEDULER_RECEIVE_TX_REQUEST": 3,
		"ENGINE_SCHEDULER_SEND_TX_REQUEST":    4,
		"ENGINE_GROUP_RECEIVE_TX_REQUEST":     5,
		"ENGINE_GROUP_SEND_TX_REQUEST":        6,
		"ENGINE_PROCESS_RECEIVE_TX_REQUEST":   7,
		"ENGINE_PROCESS_SEND_TX_REQUEST":      8,
		"ENGINE_PROCESS_RECEIVE_TX_RESPONSE":  9,
		"SANDBOX_GRPC_RECEIVE_TX_REQUEST":     10,
		"SANDBOX_GRPC_SEND_TX_REQUEST":        11,
		"SANDBOX_CHAN_SEND_TX_REQUEST":        12,
		"SANDBOX_HANDLER_RECEIVE_TX_REQUEST":  13,
		"SANDBOX_HANDLER_EXECUTE":             14,
		"SANDBOX_SEND_CHAIN_RESP":             15,
		"SANDBOX_GRPC_SEND_CHAIN_RESP":        16,
		"SANDBOX_SEND_ENGINE_RESP":            17,
		"RUNTIME_GRPC_RECEIVE_TX_RESPONSE":    18,
		"RUNTIME_GET_NOTIFY_TX_RESPONSE":      19,
		"RUNTIME_HANDLER_RECEIVE_TX_RESPONSE": 20,
		"RUNTIME_HANDLE_TX_RESPONSE":          21,
	}
)

func (x StepType) Enum() *StepType {
	p := new(StepType)
	*p = x
	return p
}

func (x StepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StepType) Descriptor() protoreflect.EnumDescriptor {
	return file_dockervm_message_proto_enumTypes[1].Descriptor()
}

func (StepType) Type() protoreflect.EnumType {
	return &file_dockervm_message_proto_enumTypes[1]
}

func (x StepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StepType.Descriptor instead.
func (StepType) EnumDescriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{1}
}

type DockerVMCode int32

const (
	DockerVMCode_OK   DockerVMCode = 0
	DockerVMCode_FAIL DockerVMCode = 1
)

// Enum value maps for DockerVMCode.
var (
	DockerVMCode_name = map[int32]string{
		0: "OK",
		1: "FAIL",
	}
	DockerVMCode_value = map[string]int32{
		"OK":   0,
		"FAIL": 1,
	}
)

func (x DockerVMCode) Enum() *DockerVMCode {
	p := new(DockerVMCode)
	*p = x
	return p
}

func (x DockerVMCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockerVMCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dockervm_message_proto_enumTypes[2].Descriptor()
}

func (DockerVMCode) Type() protoreflect.EnumType {
	return &file_dockervm_message_proto_enumTypes[2]
}

func (x DockerVMCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockerVMCode.Descriptor instead.
func (DockerVMCode) EnumDescriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{2}
}

//DockerVMMessage means message between chainmaker and docker vm
type DockerVMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId         string        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Type         DockerVMType  `protobuf:"varint,2,opt,name=type,proto3,enum=proto.DockerVMType" json:"type,omitempty"`
	CrossContext *CrossContext `protobuf:"bytes,3,opt,name=cross_context,json=crossContext,proto3" json:"cross_context,omitempty"`
	// if not used, set to nil
	SysCallMessage *SysCallMessage `protobuf:"bytes,4,opt,name=sys_call_message,json=sysCallMessage,proto3" json:"sys_call_message,omitempty"`
	// if not used, set to nil
	Request *TxRequest `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	// if not used, set to nil
	Response      *TxResponse     `protobuf:"bytes,6,opt,name=response,proto3" json:"response,omitempty"`
	ChainId       string          `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	StepDurations []*StepDuration `protobuf:"bytes,8,rep,name=step_durations,json=stepDurations,proto3" json:"step_durations,omitempty"`
}

func (x *DockerVMMessage) Reset() {
	*x = DockerVMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerVMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerVMMessage) ProtoMessage() {}

func (x *DockerVMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerVMMessage.ProtoReflect.Descriptor instead.
func (*DockerVMMessage) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{0}
}

func (x *DockerVMMessage) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *DockerVMMessage) GetType() DockerVMType {
	if x != nil {
		return x.Type
	}
	return DockerVMType_UNDEFINED
}

func (x *DockerVMMessage) GetCrossContext() *CrossContext {
	if x != nil {
		return x.CrossContext
	}
	return nil
}

func (x *DockerVMMessage) GetSysCallMessage() *SysCallMessage {
	if x != nil {
		return x.SysCallMessage
	}
	return nil
}

func (x *DockerVMMessage) GetRequest() *TxRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DockerVMMessage) GetResponse() *TxResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DockerVMMessage) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *DockerVMMessage) GetStepDurations() []*StepDuration {
	if x != nil {
		return x.StepDurations
	}
	return nil
}

type SysCallMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    DockerVMCode `protobuf:"varint,1,opt,name=code,proto3,enum=proto.DockerVMCode" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// if not used, set to nil
	Payload map[string][]byte `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SysCallMessage) Reset() {
	*x = SysCallMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCallMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCallMessage) ProtoMessage() {}

func (x *SysCallMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCallMessage.ProtoReflect.Descriptor instead.
func (*SysCallMessage) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{1}
}

func (x *SysCallMessage) GetCode() DockerVMCode {
	if x != nil {
		return x.Code
	}
	return DockerVMCode_OK
}

func (x *SysCallMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SysCallMessage) GetPayload() map[string][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CrossContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDepth uint32 `protobuf:"varint,1,opt,name=current_depth,json=currentDepth,proto3" json:"current_depth,omitempty"`
	ProcessName  string `protobuf:"bytes,2,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	//
	//63          59           43                   0
	//+----------+^-----------+-^---------+-^-------
	//|   4bits   |   16bits    |   .....   | 4bits|
	//+----------+^-----------+-^---------+-^-------
	//depth_count | history_flag | vec<runtime_type>
	//the length of vec is controlled by depth_count
	CrossInfo uint64 `protobuf:"varint,3,opt,name=cross_info,json=crossInfo,proto3" json:"cross_info,omitempty"`
}

func (x *CrossContext) Reset() {
	*x = CrossContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossContext) ProtoMessage() {}

func (x *CrossContext) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossContext.ProtoReflect.Descriptor instead.
func (*CrossContext) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{2}
}

func (x *CrossContext) GetCurrentDepth() uint32 {
	if x != nil {
		return x.CurrentDepth
	}
	return 0
}

func (x *CrossContext) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *CrossContext) GetCrossInfo() uint64 {
	if x != nil {
		return x.CrossInfo
	}
	return 0
}

type StepDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          StepType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.StepType" json:"type,omitempty"`
	StartTime     int64    `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	StepDuration  int64    `protobuf:"varint,3,opt,name=step_duration,json=stepDuration,proto3" json:"step_duration,omitempty"`
	UntilDuration int64    `protobuf:"varint,4,opt,name=until_duration,json=untilDuration,proto3" json:"until_duration,omitempty"`
	Msg           string   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StepDuration) Reset() {
	*x = StepDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepDuration) ProtoMessage() {}

func (x *StepDuration) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepDuration.ProtoReflect.Descriptor instead.
func (*StepDuration) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{3}
}

func (x *StepDuration) GetType() StepType {
	if x != nil {
		return x.Type
	}
	return StepType_RUNTIME_PREPARE_TX_REQUEST
}

func (x *StepDuration) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StepDuration) GetStepDuration() int64 {
	if x != nil {
		return x.StepDuration
	}
	return 0
}

func (x *StepDuration) GetUntilDuration() int64 {
	if x != nil {
		return x.UntilDuration
	}
	return 0
}

func (x *StepDuration) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// TX_REQUEST
type TxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName    string            `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string            `protobuf:"bytes,2,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Method          string            `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Parameters      map[string][]byte `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cross contract in use
	TxContext *TxContext `protobuf:"bytes,5,opt,name=tx_context,json=txContext,proto3" json:"tx_context,omitempty"`
	ChainId   string     `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *TxRequest) Reset() {
	*x = TxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest) ProtoMessage() {}

func (x *TxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest.ProtoReflect.Descriptor instead.
func (*TxRequest) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{4}
}

func (x *TxRequest) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *TxRequest) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *TxRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TxRequest) GetParameters() map[string][]byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TxRequest) GetTxContext() *TxContext {
	if x != nil {
		return x.TxContext
	}
	return nil
}

func (x *TxRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type TxContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteMap map[string][]byte `protobuf:"bytes,1,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReadMap  map[string][]byte `protobuf:"bytes,2,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TxContext) Reset() {
	*x = TxContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxContext) ProtoMessage() {}

func (x *TxContext) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxContext.ProtoReflect.Descriptor instead.
func (*TxContext) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{5}
}

func (x *TxContext) GetWriteMap() map[string][]byte {
	if x != nil {
		return x.WriteMap
	}
	return nil
}

func (x *TxContext) GetReadMap() map[string][]byte {
	if x != nil {
		return x.ReadMap
	}
	return nil
}

// TX_RESPONSE
type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId            string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Code            DockerVMCode           `protobuf:"varint,2,opt,name=code,proto3,enum=proto.DockerVMCode" json:"code,omitempty"`
	Result          []byte                 `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Message         string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	WriteMap        map[string][]byte      `protobuf:"bytes,5,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReadMap         map[string][]byte      `protobuf:"bytes,6,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Events          []*DockerContractEvent `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	ContractName    string                 `protobuf:"bytes,8,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string                 `protobuf:"bytes,9,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	ChainId         string                 `protobuf:"bytes,10,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{6}
}

func (x *TxResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TxResponse) GetCode() DockerVMCode {
	if x != nil {
		return x.Code
	}
	return DockerVMCode_OK
}

func (x *TxResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TxResponse) GetWriteMap() map[string][]byte {
	if x != nil {
		return x.WriteMap
	}
	return nil
}

func (x *TxResponse) GetReadMap() map[string][]byte {
	if x != nil {
		return x.ReadMap
	}
	return nil
}

func (x *TxResponse) GetEvents() []*DockerContractEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TxResponse) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *TxResponse) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *TxResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type DockerContractEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Event contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Event payload
	Data []string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DockerContractEvent) Reset() {
	*x = DockerContractEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerContractEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContractEvent) ProtoMessage() {}

func (x *DockerContractEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContractEvent.ProtoReflect.Descriptor instead.
func (*DockerContractEvent) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{7}
}

func (x *DockerContractEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *DockerContractEvent) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *DockerContractEvent) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// ============== DMS pb ==============
// --------------------  request message ---------------------
type CallContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName   string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractMethod string `protobuf:"bytes,2,opt,name=contract_method,json=contractMethod,proto3" json:"contract_method,omitempty"`
	// args
	Args map[string][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallContractRequest) Reset() {
	*x = CallContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractRequest) ProtoMessage() {}

func (x *CallContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractRequest.ProtoReflect.Descriptor instead.
func (*CallContractRequest) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{8}
}

func (x *CallContractRequest) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *CallContractRequest) GetContractMethod() string {
	if x != nil {
		return x.ContractMethod
	}
	return ""
}

func (x *CallContractRequest) GetArgs() map[string][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// user method response
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A status code that should follow the HTTP status codes.
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// A message associated with the response code. error has message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A payload that can be used to include metadata with this response. success with payload
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{9}
}

func (x *Response) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// real user contract response
type ContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// always has response
	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	// always has write map
	WriteMap map[string][]byte `protobuf:"bytes,2,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// only cross contracts has read map
	ReadMap map[string][]byte `protobuf:"bytes,3,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// always has events
	Events []*Event `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ContractResponse) Reset() {
	*x = ContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResponse) ProtoMessage() {}

func (x *ContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResponse.ProtoReflect.Descriptor instead.
func (*ContractResponse) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{10}
}

func (x *ContractResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ContractResponse) GetWriteMap() map[string][]byte {
	if x != nil {
		return x.WriteMap
	}
	return nil
}

func (x *ContractResponse) GetReadMap() map[string][]byte {
	if x != nil {
		return x.ReadMap
	}
	return nil
}

func (x *ContractResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Event contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Event payload
	Data []string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dockervm_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_dockervm_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_dockervm_message_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Event) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *Event) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_dockervm_message_proto protoreflect.FileDescriptor

var file_dockervm_message_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfc, 0x02, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x73,
	0x79, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x79,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd,
	0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75,
	0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x65, 0x70, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x40,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x09, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0x3d, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x09,
	0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70,
	0x1a, 0x3b, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x04, 0x0a, 0x0a, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x1a, 0x3b, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x13, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd6, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xe3, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a,
	0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xd6,
	0x05, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45,
	0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x56, 0x5f, 0x49, 0x54,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x11,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x56, 0x5f, 0x49, 0x54,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4b, 0x56, 0x5f,
	0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4b, 0x56,
	0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x16, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x1c, 0x2a, 0x97, 0x06, 0x0a, 0x08, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x47, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45,
	0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x58, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x47,
	0x52, 0x50, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x4e, 0x44,
	0x42, 0x4f, 0x58, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41,
	0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22,
	0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10,
	0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0f, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x10,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x11, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x55, 0x4e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x15, 0x2a, 0x20, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x01, 0x32, 0x5a, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x52,
	0x70, 0x63, 0x12, 0x4b, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x56, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x30, 0x5a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x6d, 0x2d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dockervm_message_proto_rawDescOnce sync.Once
	file_dockervm_message_proto_rawDescData = file_dockervm_message_proto_rawDesc
)

func file_dockervm_message_proto_rawDescGZIP() []byte {
	file_dockervm_message_proto_rawDescOnce.Do(func() {
		file_dockervm_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_dockervm_message_proto_rawDescData)
	})
	return file_dockervm_message_proto_rawDescData
}

var file_dockervm_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dockervm_message_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_dockervm_message_proto_goTypes = []interface{}{
	(DockerVMType)(0),           // 0: proto.DockerVMType
	(StepType)(0),               // 1: proto.StepType
	(DockerVMCode)(0),           // 2: proto.DockerVMCode
	(*DockerVMMessage)(nil),     // 3: proto.DockerVMMessage
	(*SysCallMessage)(nil),      // 4: proto.SysCallMessage
	(*CrossContext)(nil),        // 5: proto.CrossContext
	(*StepDuration)(nil),        // 6: proto.StepDuration
	(*TxRequest)(nil),           // 7: proto.TxRequest
	(*TxContext)(nil),           // 8: proto.TxContext
	(*TxResponse)(nil),          // 9: proto.TxResponse
	(*DockerContractEvent)(nil), // 10: proto.DockerContractEvent
	(*CallContractRequest)(nil), // 11: proto.CallContractRequest
	(*Response)(nil),            // 12: proto.Response
	(*ContractResponse)(nil),    // 13: proto.ContractResponse
	(*Event)(nil),               // 14: proto.Event
	nil,                         // 15: proto.SysCallMessage.PayloadEntry
	nil,                         // 16: proto.TxRequest.ParametersEntry
	nil,                         // 17: proto.TxContext.WriteMapEntry
	nil,                         // 18: proto.TxContext.ReadMapEntry
	nil,                         // 19: proto.TxResponse.WriteMapEntry
	nil,                         // 20: proto.TxResponse.ReadMapEntry
	nil,                         // 21: proto.CallContractRequest.ArgsEntry
	nil,                         // 22: proto.ContractResponse.WriteMapEntry
	nil,                         // 23: proto.ContractResponse.ReadMapEntry
}
var file_dockervm_message_proto_depIdxs = []int32{
	0,  // 0: proto.DockerVMMessage.type:type_name -> proto.DockerVMType
	5,  // 1: proto.DockerVMMessage.cross_context:type_name -> proto.CrossContext
	4,  // 2: proto.DockerVMMessage.sys_call_message:type_name -> proto.SysCallMessage
	7,  // 3: proto.DockerVMMessage.request:type_name -> proto.TxRequest
	9,  // 4: proto.DockerVMMessage.response:type_name -> proto.TxResponse
	6,  // 5: proto.DockerVMMessage.step_durations:type_name -> proto.StepDuration
	2,  // 6: proto.SysCallMessage.code:type_name -> proto.DockerVMCode
	15, // 7: proto.SysCallMessage.payload:type_name -> proto.SysCallMessage.PayloadEntry
	1,  // 8: proto.StepDuration.type:type_name -> proto.StepType
	16, // 9: proto.TxRequest.parameters:type_name -> proto.TxRequest.ParametersEntry
	8,  // 10: proto.TxRequest.tx_context:type_name -> proto.TxContext
	17, // 11: proto.TxContext.write_map:type_name -> proto.TxContext.WriteMapEntry
	18, // 12: proto.TxContext.read_map:type_name -> proto.TxContext.ReadMapEntry
	2,  // 13: proto.TxResponse.code:type_name -> proto.DockerVMCode
	19, // 14: proto.TxResponse.write_map:type_name -> proto.TxResponse.WriteMapEntry
	20, // 15: proto.TxResponse.read_map:type_name -> proto.TxResponse.ReadMapEntry
	10, // 16: proto.TxResponse.events:type_name -> proto.DockerContractEvent
	21, // 17: proto.CallContractRequest.args:type_name -> proto.CallContractRequest.ArgsEntry
	12, // 18: proto.ContractResponse.response:type_name -> proto.Response
	22, // 19: proto.ContractResponse.write_map:type_name -> proto.ContractResponse.WriteMapEntry
	23, // 20: proto.ContractResponse.read_map:type_name -> proto.ContractResponse.ReadMapEntry
	14, // 21: proto.ContractResponse.events:type_name -> proto.Event
	3,  // 22: proto.DockerVMRpc.DockerVMCommunicate:input_type -> proto.DockerVMMessage
	3,  // 23: proto.DockerVMRpc.DockerVMCommunicate:output_type -> proto.DockerVMMessage
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_dockervm_message_proto_init() }
func file_dockervm_message_proto_init() {
	if File_dockervm_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dockervm_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerVMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCallMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerContractEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dockervm_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dockervm_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dockervm_message_proto_goTypes,
		DependencyIndexes: file_dockervm_message_proto_depIdxs,
		EnumInfos:         file_dockervm_message_proto_enumTypes,
		MessageInfos:      file_dockervm_message_proto_msgTypes,
	}.Build()
	File_dockervm_message_proto = out.File
	file_dockervm_message_proto_rawDesc = nil
	file_dockervm_message_proto_goTypes = nil
	file_dockervm_message_proto_depIdxs = nil
}
