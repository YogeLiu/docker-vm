// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: dockervm_message.proto

package protogo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerVMRpcClient is the client API for DockerVMRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerVMRpcClient interface {
	DockerVMCommunicate(ctx context.Context, opts ...grpc.CallOption) (DockerVMRpc_DockerVMCommunicateClient, error)
}

type dockerVMRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerVMRpcClient(cc grpc.ClientConnInterface) DockerVMRpcClient {
	return &dockerVMRpcClient{cc}
}

func (c *dockerVMRpcClient) DockerVMCommunicate(ctx context.Context, opts ...grpc.CallOption) (DockerVMRpc_DockerVMCommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &DockerVMRpc_ServiceDesc.Streams[0], "/proto.DockerVMRpc/DockerVMCommunicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerVMRpcDockerVMCommunicateClient{stream}
	return x, nil
}

type DockerVMRpc_DockerVMCommunicateClient interface {
	Send(*DockerVMMessage) error
	Recv() (*DockerVMMessage, error)
	grpc.ClientStream
}

type dockerVMRpcDockerVMCommunicateClient struct {
	grpc.ClientStream
}

func (x *dockerVMRpcDockerVMCommunicateClient) Send(m *DockerVMMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dockerVMRpcDockerVMCommunicateClient) Recv() (*DockerVMMessage, error) {
	m := new(DockerVMMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerVMRpcServer is the server API for DockerVMRpc service.
// All implementations should embed UnimplementedDockerVMRpcServer
// for forward compatibility
type DockerVMRpcServer interface {
	DockerVMCommunicate(DockerVMRpc_DockerVMCommunicateServer) error
}

// UnimplementedDockerVMRpcServer should be embedded to have forward compatible implementations.
type UnimplementedDockerVMRpcServer struct {
}

func (UnimplementedDockerVMRpcServer) DockerVMCommunicate(DockerVMRpc_DockerVMCommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerVMCommunicate not implemented")
}

// UnsafeDockerVMRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerVMRpcServer will
// result in compilation errors.
type UnsafeDockerVMRpcServer interface {
	mustEmbedUnimplementedDockerVMRpcServer()
}

func RegisterDockerVMRpcServer(s grpc.ServiceRegistrar, srv DockerVMRpcServer) {
	s.RegisterService(&DockerVMRpc_ServiceDesc, srv)
}

func _DockerVMRpc_DockerVMCommunicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DockerVMRpcServer).DockerVMCommunicate(&dockerVMRpcDockerVMCommunicateServer{stream})
}

type DockerVMRpc_DockerVMCommunicateServer interface {
	Send(*DockerVMMessage) error
	Recv() (*DockerVMMessage, error)
	grpc.ServerStream
}

type dockerVMRpcDockerVMCommunicateServer struct {
	grpc.ServerStream
}

func (x *dockerVMRpcDockerVMCommunicateServer) Send(m *DockerVMMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dockerVMRpcDockerVMCommunicateServer) Recv() (*DockerVMMessage, error) {
	m := new(DockerVMMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerVMRpc_ServiceDesc is the grpc.ServiceDesc for DockerVMRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerVMRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DockerVMRpc",
	HandlerType: (*DockerVMRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DockerVMCommunicate",
			Handler:       _DockerVMRpc_DockerVMCommunicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dockervm_message.proto",
}
