// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdm_message.proto

package protogo

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CDMType int32

const (
	CDMType_CDM_TYPE_UNDEFINED                         CDMType = 0
	CDMType_CDM_TYPE_TX_REQUEST                        CDMType = 1
	CDMType_CDM_TYPE_TX_RESPONSE                       CDMType = 2
	CDMType_CDM_TYPE_GET_STATE                         CDMType = 3
	CDMType_CDM_TYPE_GET_STATE_RESPONSE                CDMType = 4
	CDMType_CDM_TYPE_GET_BYTECODE                      CDMType = 5
	CDMType_CDM_TYPE_GET_BYTECODE_RESPONSE             CDMType = 6
	CDMType_CDM_TYPE_CREATE_KV_ITERATOR                CDMType = 7
	CDMType_CDM_TYPE_CREATE_KV_ITERATOR_RESPONSE       CDMType = 8
	CDMType_CDM_TYPE_CONSUME_KV_ITERATOR               CDMType = 9
	CDMType_CDM_TYPE_CONSUME_KV_ITERATOR_RESPONSE      CDMType = 10
	CDMType_CDM_TYPE_CREATE_KEY_HISTORY_ITER           CDMType = 11
	CDMType_CDM_TYPE_CREATE_KEY_HISTORY_TER_RESPONSE   CDMType = 12
	CDMType_CDM_TYPE_CONSUME_KEY_HISTORY_ITER          CDMType = 13
	CDMType_CDM_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE CDMType = 14
	CDMType_CDM_TYPE_GET_SENDER_ADDRESS                CDMType = 15
	CDMType_CDM_TYPE_GET_SENDER_ADDRESS_RESPONSE       CDMType = 16
	CDMType_CDM_TYPE_GET_CONTRACT_NAME                 CDMType = 17
	CDMType_CDM_TYPE_GET_CONTRACT_NAME_RESPONSE        CDMType = 18
	CDMType_CDM_TYPE_GET_BATCH_STATE                   CDMType = 19
	CDMType_CDM_TYPE_GET_BATCH_STATE_RESPONSE          CDMType = 20
	CDMType_CDM_TYPE_CALL_CONTRACT                     CDMType = 21
)

var CDMType_name = map[int32]string{
	0:  "CDM_TYPE_UNDEFINED",
	1:  "CDM_TYPE_TX_REQUEST",
	2:  "CDM_TYPE_TX_RESPONSE",
	3:  "CDM_TYPE_GET_STATE",
	4:  "CDM_TYPE_GET_STATE_RESPONSE",
	5:  "CDM_TYPE_GET_BYTECODE",
	6:  "CDM_TYPE_GET_BYTECODE_RESPONSE",
	7:  "CDM_TYPE_CREATE_KV_ITERATOR",
	8:  "CDM_TYPE_CREATE_KV_ITERATOR_RESPONSE",
	9:  "CDM_TYPE_CONSUME_KV_ITERATOR",
	10: "CDM_TYPE_CONSUME_KV_ITERATOR_RESPONSE",
	11: "CDM_TYPE_CREATE_KEY_HISTORY_ITER",
	12: "CDM_TYPE_CREATE_KEY_HISTORY_TER_RESPONSE",
	13: "CDM_TYPE_CONSUME_KEY_HISTORY_ITER",
	14: "CDM_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE",
	15: "CDM_TYPE_GET_SENDER_ADDRESS",
	16: "CDM_TYPE_GET_SENDER_ADDRESS_RESPONSE",
	17: "CDM_TYPE_GET_CONTRACT_NAME",
	18: "CDM_TYPE_GET_CONTRACT_NAME_RESPONSE",
	19: "CDM_TYPE_GET_BATCH_STATE",
	20: "CDM_TYPE_GET_BATCH_STATE_RESPONSE",
	21: "CDM_TYPE_CALL_CONTRACT",
}

var CDMType_value = map[string]int32{
	"CDM_TYPE_UNDEFINED":                         0,
	"CDM_TYPE_TX_REQUEST":                        1,
	"CDM_TYPE_TX_RESPONSE":                       2,
	"CDM_TYPE_GET_STATE":                         3,
	"CDM_TYPE_GET_STATE_RESPONSE":                4,
	"CDM_TYPE_GET_BYTECODE":                      5,
	"CDM_TYPE_GET_BYTECODE_RESPONSE":             6,
	"CDM_TYPE_CREATE_KV_ITERATOR":                7,
	"CDM_TYPE_CREATE_KV_ITERATOR_RESPONSE":       8,
	"CDM_TYPE_CONSUME_KV_ITERATOR":               9,
	"CDM_TYPE_CONSUME_KV_ITERATOR_RESPONSE":      10,
	"CDM_TYPE_CREATE_KEY_HISTORY_ITER":           11,
	"CDM_TYPE_CREATE_KEY_HISTORY_TER_RESPONSE":   12,
	"CDM_TYPE_CONSUME_KEY_HISTORY_ITER":          13,
	"CDM_TYPE_CONSUME_KEY_HISTORY_ITER_RESPONSE": 14,
	"CDM_TYPE_GET_SENDER_ADDRESS":                15,
	"CDM_TYPE_GET_SENDER_ADDRESS_RESPONSE":       16,
	"CDM_TYPE_GET_CONTRACT_NAME":                 17,
	"CDM_TYPE_GET_CONTRACT_NAME_RESPONSE":        18,
	"CDM_TYPE_GET_BATCH_STATE":                   19,
	"CDM_TYPE_GET_BATCH_STATE_RESPONSE":          20,
	"CDM_TYPE_CALL_CONTRACT":                     21,
}

func (x CDMType) String() string {
	return proto.EnumName(CDMType_name, int32(x))
}

func (CDMType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{0}
}

type ContractResultCode int32

const (
	ContractResultCode_OK   ContractResultCode = 0
	ContractResultCode_FAIL ContractResultCode = 1
)

var ContractResultCode_name = map[int32]string{
	0: "OK",
	1: "FAIL",
}

var ContractResultCode_value = map[string]int32{
	"OK":   0,
	"FAIL": 1,
}

func (x ContractResultCode) String() string {
	return proto.EnumName(ContractResultCode_name, int32(x))
}

func (ContractResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{1}
}

type ProcessState int32

const (
	ProcessState_PROCESS_STATE_CREATED        ProcessState = 0
	ProcessState_PROCESS_STATE_RUNNING        ProcessState = 1
	ProcessState_PROCESS_STATE_EXPIRE         ProcessState = 2
	ProcessState_PROCESS_STATE_TX_TIMEOUT     ProcessState = 3
	ProcessState_PROCESS_STATE_CROSS_FINISHED ProcessState = 4
	ProcessState_PROCESS_STATE_CROSS_FAIL     ProcessState = 5
)

var ProcessState_name = map[int32]string{
	0: "PROCESS_STATE_CREATED",
	1: "PROCESS_STATE_RUNNING",
	2: "PROCESS_STATE_EXPIRE",
	3: "PROCESS_STATE_TX_TIMEOUT",
	4: "PROCESS_STATE_CROSS_FINISHED",
	5: "PROCESS_STATE_CROSS_FAIL",
}

var ProcessState_value = map[string]int32{
	"PROCESS_STATE_CREATED":        0,
	"PROCESS_STATE_RUNNING":        1,
	"PROCESS_STATE_EXPIRE":         2,
	"PROCESS_STATE_TX_TIMEOUT":     3,
	"PROCESS_STATE_CROSS_FINISHED": 4,
	"PROCESS_STATE_CROSS_FAIL":     5,
}

func (x ProcessState) String() string {
	return proto.EnumName(ProcessState_name, int32(x))
}

func (ProcessState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{2}
}

//CMMessage means message between chainmaker and docker manager
type CDMMessage struct {
	TxId       string      `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Type       CDMType     `protobuf:"varint,2,opt,name=type,proto3,enum=dockergo.CDMType" json:"type,omitempty"`
	ResultCode int32       `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	Payload    []byte      `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Message    string      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	TxRequest  *TxRequest  `protobuf:"bytes,6,opt,name=txRequest,proto3" json:"txRequest,omitempty"`
	TxResponse *TxResponse `protobuf:"bytes,7,opt,name=txResponse,proto3" json:"txResponse,omitempty"`
	ChainId    string      `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CDMMessage) Reset()         { *m = CDMMessage{} }
func (m *CDMMessage) String() string { return proto.CompactTextString(m) }
func (*CDMMessage) ProtoMessage()    {}
func (*CDMMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{0}
}
func (m *CDMMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDMMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDMMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDMMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDMMessage.Merge(m, src)
}
func (m *CDMMessage) XXX_Size() int {
	return m.Size()
}
func (m *CDMMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CDMMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CDMMessage proto.InternalMessageInfo

func (m *CDMMessage) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *CDMMessage) GetType() CDMType {
	if m != nil {
		return m.Type
	}
	return CDMType_CDM_TYPE_UNDEFINED
}

func (m *CDMMessage) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

func (m *CDMMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CDMMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CDMMessage) GetTxRequest() *TxRequest {
	if m != nil {
		return m.TxRequest
	}
	return nil
}

func (m *CDMMessage) GetTxResponse() *TxResponse {
	if m != nil {
		return m.TxResponse
	}
	return nil
}

func (m *CDMMessage) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// TX_REQUEST
type TxRequest struct {
	TxId            string            `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ContractName    string            `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string            `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Method          string            `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Parameters      map[string][]byte `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// cross contract in use
	TxContext *TxContext `protobuf:"bytes,6,opt,name=tx_context,json=txContext,proto3" json:"tx_context,omitempty"`
	ChainId   string     `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *TxRequest) Reset()         { *m = TxRequest{} }
func (m *TxRequest) String() string { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()    {}
func (*TxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{1}
}
func (m *TxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRequest.Merge(m, src)
}
func (m *TxRequest) XXX_Size() int {
	return m.Size()
}
func (m *TxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxRequest proto.InternalMessageInfo

func (m *TxRequest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxRequest) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *TxRequest) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *TxRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TxRequest) GetParameters() map[string][]byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *TxRequest) GetTxContext() *TxContext {
	if m != nil {
		return m.TxContext
	}
	return nil
}

func (m *TxRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type TxContext struct {
	CurrentHeight       uint32            `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	WriteMap            map[string][]byte `protobuf:"bytes,2,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReadMap             map[string][]byte `protobuf:"bytes,3,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OriginalProcessName string            `protobuf:"bytes,4,opt,name=original_process_name,json=originalProcessName,proto3" json:"original_process_name,omitempty"`
}

func (m *TxContext) Reset()         { *m = TxContext{} }
func (m *TxContext) String() string { return proto.CompactTextString(m) }
func (*TxContext) ProtoMessage()    {}
func (*TxContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{2}
}
func (m *TxContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContext.Merge(m, src)
}
func (m *TxContext) XXX_Size() int {
	return m.Size()
}
func (m *TxContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContext.DiscardUnknown(m)
}

var xxx_messageInfo_TxContext proto.InternalMessageInfo

func (m *TxContext) GetCurrentHeight() uint32 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *TxContext) GetWriteMap() map[string][]byte {
	if m != nil {
		return m.WriteMap
	}
	return nil
}

func (m *TxContext) GetReadMap() map[string][]byte {
	if m != nil {
		return m.ReadMap
	}
	return nil
}

func (m *TxContext) GetOriginalProcessName() string {
	if m != nil {
		return m.OriginalProcessName
	}
	return ""
}

// TX_RESPONSE
type TxResponse struct {
	TxId          string                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Code          ContractResultCode     `protobuf:"varint,2,opt,name=code,proto3,enum=dockergo.ContractResultCode" json:"code,omitempty"`
	Result        []byte                 `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	WriteMap      map[string][]byte      `protobuf:"bytes,5,rep,name=write_map,json=writeMap,proto3" json:"write_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Events        []*DockerContractEvent `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	ReadMap       map[string][]byte      `protobuf:"bytes,7,rep,name=read_map,json=readMap,proto3" json:"read_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChainId       string                 `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxElapsedTime *TxElapsedTime         `protobuf:"bytes,9,opt,name=tx_elapsed_time,json=txElapsedTime,proto3" json:"tx_elapsed_time,omitempty"`
}

func (m *TxResponse) Reset()         { *m = TxResponse{} }
func (m *TxResponse) String() string { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()    {}
func (*TxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{3}
}
func (m *TxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResponse.Merge(m, src)
}
func (m *TxResponse) XXX_Size() int {
	return m.Size()
}
func (m *TxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxResponse proto.InternalMessageInfo

func (m *TxResponse) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxResponse) GetCode() ContractResultCode {
	if m != nil {
		return m.Code
	}
	return ContractResultCode_OK
}

func (m *TxResponse) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TxResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TxResponse) GetWriteMap() map[string][]byte {
	if m != nil {
		return m.WriteMap
	}
	return nil
}

func (m *TxResponse) GetEvents() []*DockerContractEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TxResponse) GetReadMap() map[string][]byte {
	if m != nil {
		return m.ReadMap
	}
	return nil
}

func (m *TxResponse) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *TxResponse) GetTxElapsedTime() *TxElapsedTime {
	if m != nil {
		return m.TxElapsedTime
	}
	return nil
}

type DockerContractEvent struct {
	// Event topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Event contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Event contract version
	ContractVersion string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// Event payload
	Data []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *DockerContractEvent) Reset()         { *m = DockerContractEvent{} }
func (m *DockerContractEvent) String() string { return proto.CompactTextString(m) }
func (*DockerContractEvent) ProtoMessage()    {}
func (*DockerContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{4}
}
func (m *DockerContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DockerContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DockerContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DockerContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerContractEvent.Merge(m, src)
}
func (m *DockerContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *DockerContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DockerContractEvent proto.InternalMessageInfo

func (m *DockerContractEvent) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *DockerContractEvent) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *DockerContractEvent) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *DockerContractEvent) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxElapsedTime struct {
	CrossCallCnt  int32 `protobuf:"varint,1,opt,name=CrossCallCnt,proto3" json:"CrossCallCnt,omitempty"`
	CrossCallTime int64 `protobuf:"varint,2,opt,name=CrossCallTime,proto3" json:"CrossCallTime,omitempty"`
}

func (m *TxElapsedTime) Reset()         { *m = TxElapsedTime{} }
func (m *TxElapsedTime) String() string { return proto.CompactTextString(m) }
func (*TxElapsedTime) ProtoMessage()    {}
func (*TxElapsedTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_797a9ac5b2994f84, []int{5}
}
func (m *TxElapsedTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxElapsedTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxElapsedTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxElapsedTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxElapsedTime.Merge(m, src)
}
func (m *TxElapsedTime) XXX_Size() int {
	return m.Size()
}
func (m *TxElapsedTime) XXX_DiscardUnknown() {
	xxx_messageInfo_TxElapsedTime.DiscardUnknown(m)
}

var xxx_messageInfo_TxElapsedTime proto.InternalMessageInfo

func (m *TxElapsedTime) GetCrossCallCnt() int32 {
	if m != nil {
		return m.CrossCallCnt
	}
	return 0
}

func (m *TxElapsedTime) GetCrossCallTime() int64 {
	if m != nil {
		return m.CrossCallTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("dockergo.CDMType", CDMType_name, CDMType_value)
	proto.RegisterEnum("dockergo.ContractResultCode", ContractResultCode_name, ContractResultCode_value)
	proto.RegisterEnum("dockergo.ProcessState", ProcessState_name, ProcessState_value)
	proto.RegisterType((*CDMMessage)(nil), "dockergo.CDMMessage")
	proto.RegisterType((*TxRequest)(nil), "dockergo.TxRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "dockergo.TxRequest.ParametersEntry")
	proto.RegisterType((*TxContext)(nil), "dockergo.TxContext")
	proto.RegisterMapType((map[string][]byte)(nil), "dockergo.TxContext.ReadMapEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "dockergo.TxContext.WriteMapEntry")
	proto.RegisterType((*TxResponse)(nil), "dockergo.TxResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "dockergo.TxResponse.ReadMapEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "dockergo.TxResponse.WriteMapEntry")
	proto.RegisterType((*DockerContractEvent)(nil), "dockergo.DockerContractEvent")
	proto.RegisterType((*TxElapsedTime)(nil), "dockergo.TxElapsedTime")
}

func init() { proto.RegisterFile("cdm_message.proto", fileDescriptor_797a9ac5b2994f84) }

var fileDescriptor_797a9ac5b2994f84 = []byte{
	// 1201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x16, 0xf5, 0x5f, 0x63, 0xc9, 0x66, 0x56, 0x76, 0xc2, 0xe8, 0xe7, 0x9f, 0xa2, 0x28, 0x71,
	0xab, 0x18, 0x8d, 0x9c, 0xaa, 0x2d, 0x10, 0x24, 0x6d, 0x03, 0x85, 0xdc, 0xc4, 0x42, 0x2c, 0x4a,
	0x5d, 0xd2, 0x69, 0xdc, 0x0b, 0xc1, 0x88, 0x0b, 0x59, 0xb0, 0x28, 0xb2, 0x24, 0xed, 0xd8, 0xf7,
	0xde, 0x9b, 0x57, 0xe8, 0x7b, 0xf4, 0x01, 0x7a, 0xcc, 0xb1, 0x40, 0x7b, 0x28, 0xec, 0x17, 0x29,
	0xc8, 0xa5, 0x44, 0xd1, 0x92, 0x5d, 0x04, 0x28, 0xd0, 0xdb, 0xce, 0xcc, 0x37, 0xdf, 0x2c, 0xbf,
	0x99, 0x21, 0x09, 0x37, 0x06, 0x86, 0xa9, 0x99, 0xd4, 0x75, 0xf5, 0x21, 0x6d, 0xda, 0x8e, 0xe5,
	0x59, 0x28, 0x6f, 0x58, 0x83, 0x23, 0xea, 0x0c, 0xad, 0xfa, 0x2f, 0x49, 0x00, 0x51, 0xea, 0x76,
	0x59, 0x18, 0x95, 0x21, 0xe3, 0x9d, 0x6a, 0x23, 0x43, 0xe0, 0x6a, 0x5c, 0xa3, 0x40, 0xd2, 0xde,
	0x69, 0xc7, 0x40, 0x5b, 0x90, 0xf6, 0xce, 0x6c, 0x2a, 0x24, 0x6b, 0x5c, 0x63, 0xb5, 0x75, 0xa3,
	0x39, 0x4d, 0x6e, 0x8a, 0x52, 0x57, 0x3d, 0xb3, 0x29, 0x09, 0xc2, 0xe8, 0x0e, 0xac, 0x38, 0xd4,
	0x3d, 0x1e, 0x7b, 0xda, 0xc0, 0x32, 0xa8, 0x90, 0xaa, 0x71, 0x8d, 0x0c, 0x01, 0xe6, 0x12, 0x2d,
	0x83, 0x22, 0x01, 0x72, 0xb6, 0x7e, 0x36, 0xb6, 0x74, 0x43, 0x48, 0xd7, 0xb8, 0x46, 0x91, 0x4c,
	0x4d, 0x3f, 0x12, 0x5e, 0x50, 0xc8, 0x04, 0x85, 0xa7, 0x26, 0xfa, 0x1c, 0x0a, 0xde, 0x29, 0xa1,
	0x3f, 0x1e, 0x53, 0xd7, 0x13, 0xb2, 0x35, 0xae, 0xb1, 0xd2, 0x2a, 0x47, 0x17, 0x50, 0xa7, 0x21,
	0x12, 0xa1, 0xd0, 0x97, 0x00, 0xbe, 0xe1, 0xda, 0xd6, 0xc4, 0xa5, 0x42, 0x2e, 0xc8, 0x59, 0x8f,
	0xe7, 0xb0, 0x18, 0x99, 0xc3, 0xa1, 0xdb, 0x90, 0x1f, 0x1c, 0xea, 0xa3, 0x89, 0xff, 0xf0, 0x79,
	0x76, 0x87, 0xc0, 0xee, 0x18, 0xf5, 0x3f, 0x92, 0x50, 0x98, 0x55, 0x5a, 0x2e, 0xd1, 0x3d, 0x28,
	0x0d, 0xac, 0x89, 0xe7, 0xe8, 0x03, 0x4f, 0x9b, 0xe8, 0x26, 0xd3, 0xaa, 0x40, 0x8a, 0x53, 0xa7,
	0xac, 0x9b, 0x14, 0x3d, 0x00, 0x7e, 0x06, 0x3a, 0xa1, 0x8e, 0x3b, 0xb2, 0x26, 0x81, 0x4a, 0x05,
	0xb2, 0x36, 0xf5, 0xbf, 0x66, 0x6e, 0x74, 0x13, 0xb2, 0x26, 0xf5, 0x0e, 0x2d, 0xa6, 0x54, 0x81,
	0x84, 0x16, 0x12, 0x01, 0x6c, 0xdd, 0xd1, 0x4d, 0xea, 0x51, 0xc7, 0x15, 0x32, 0xb5, 0x54, 0x63,
	0xa5, 0x75, 0x6f, 0x89, 0x1e, 0xcd, 0xfe, 0x0c, 0x85, 0x27, 0x9e, 0x73, 0x46, 0xe6, 0xd2, 0x50,
	0xcb, 0x17, 0x48, 0xf3, 0x4b, 0xd2, 0xd3, 0xa5, 0xa2, 0x8a, 0x2c, 0xe4, 0x8b, 0x1a, 0x1e, 0x63,
	0xf2, 0xe4, 0x62, 0xf2, 0x54, 0xbe, 0x81, 0xb5, 0x4b, 0xd5, 0x10, 0x0f, 0xa9, 0x23, 0x7a, 0x16,
	0x2a, 0xe4, 0x1f, 0xd1, 0x3a, 0x64, 0x4e, 0xf4, 0xf1, 0x31, 0x13, 0xa6, 0x48, 0x98, 0xf1, 0x24,
	0xf9, 0x98, 0xab, 0xff, 0x19, 0xa8, 0x3b, 0xad, 0xb3, 0x05, 0xab, 0x83, 0x63, 0xc7, 0xa1, 0x13,
	0x4f, 0x3b, 0xa4, 0xa3, 0xe1, 0xa1, 0x17, 0x90, 0x94, 0x48, 0x29, 0xf4, 0xee, 0x06, 0x4e, 0xf4,
	0x2d, 0x14, 0xde, 0x39, 0x23, 0x8f, 0x6a, 0xa6, 0x6e, 0x0b, 0xc9, 0x40, 0x86, 0xbb, 0x4b, 0x9e,
	0xa0, 0xf9, 0xbd, 0x0f, 0xea, 0xea, 0x36, 0x13, 0x21, 0xff, 0x2e, 0x34, 0xd1, 0x53, 0xc8, 0x3b,
	0x54, 0x37, 0x82, 0xf4, 0x54, 0x90, 0x5e, 0x5b, 0x96, 0x4e, 0xa8, 0x6e, 0xcc, 0xb2, 0x73, 0x0e,
	0xb3, 0x50, 0x0b, 0x36, 0x2c, 0x67, 0x34, 0x1c, 0x4d, 0xf4, 0xb1, 0x66, 0x3b, 0xd6, 0x80, 0xba,
	0x2e, 0x6b, 0x3a, 0xeb, 0x55, 0x79, 0x1a, 0xec, 0xb3, 0x98, 0xdf, 0xfb, 0xca, 0x53, 0x28, 0xc5,
	0xee, 0xf2, 0x31, 0x12, 0x55, 0x9e, 0x40, 0x71, 0xfe, 0x26, 0x1f, 0x25, 0xef, 0xfb, 0x34, 0x40,
	0x34, 0xf2, 0xcb, 0xa7, 0xf7, 0x11, 0xa4, 0x83, 0x95, 0x65, 0x0b, 0xbe, 0x39, 0xb7, 0xe0, 0xe1,
	0x58, 0x92, 0xd9, 0x12, 0x93, 0x00, 0xe9, 0xcf, 0x27, 0x5b, 0xec, 0x60, 0x80, 0x8b, 0x24, 0xb4,
	0xe6, 0x17, 0x39, 0x1d, 0x5f, 0xe4, 0x67, 0xf3, 0x1d, 0x63, 0x83, 0x5b, 0x5f, 0xb6, 0x94, 0x57,
	0xb6, 0xec, 0x2b, 0xc8, 0xd2, 0x13, 0x3a, 0xf1, 0x5c, 0x21, 0x1b, 0x64, 0xff, 0x3f, 0xca, 0x96,
	0x82, 0xc3, 0xf4, 0xb2, 0xd8, 0x47, 0x91, 0x10, 0x8c, 0xbe, 0x9e, 0xeb, 0x74, 0x6e, 0x71, 0x50,
	0x66, 0x65, 0x97, 0xb7, 0xfa, 0xea, 0xb7, 0x02, 0x7a, 0x06, 0x6b, 0xde, 0xa9, 0x46, 0xc7, 0xba,
	0xed, 0x52, 0x43, 0xf3, 0x46, 0x26, 0x15, 0x0a, 0xc1, 0x2a, 0xdd, 0x9a, 0xe7, 0xc7, 0x2c, 0xae,
	0x8e, 0x4c, 0x4a, 0x4a, 0xde, 0xbc, 0xf9, 0xdf, 0x8d, 0xc4, 0xcf, 0x1c, 0x94, 0x97, 0x48, 0xe6,
	0x67, 0x78, 0x96, 0x3d, 0x1a, 0x84, 0x2c, 0xcc, 0xf8, 0xd7, 0x5f, 0x6d, 0x08, 0xd2, 0x86, 0xee,
	0xe9, 0x42, 0xba, 0x96, 0xf2, 0x07, 0xd0, 0x3f, 0xd7, 0x0f, 0xa0, 0x14, 0x93, 0x0a, 0xd5, 0xa1,
	0x28, 0x3a, 0x96, 0xeb, 0x8a, 0xfa, 0x78, 0x2c, 0x4e, 0xd8, 0x4b, 0x20, 0x43, 0x62, 0x3e, 0x74,
	0x1f, 0x4a, 0x33, 0xdb, 0x4f, 0x0a, 0x2e, 0x96, 0x22, 0x71, 0xe7, 0xf6, 0x4f, 0x59, 0xc8, 0x85,
	0xdf, 0x29, 0x74, 0x13, 0x90, 0x28, 0x75, 0x35, 0xf5, 0xa0, 0x8f, 0xb5, 0x7d, 0x59, 0xc2, 0x2f,
	0x3a, 0x32, 0x96, 0xf8, 0x04, 0xba, 0x05, 0xe5, 0x99, 0x5f, 0x7d, 0xa3, 0x11, 0xfc, 0xdd, 0x3e,
	0x56, 0x54, 0x9e, 0x43, 0x02, 0xac, 0xc7, 0x03, 0x4a, 0xbf, 0x27, 0x2b, 0x98, 0x4f, 0xc6, 0xa8,
	0x5e, 0x62, 0x55, 0x53, 0xd4, 0xb6, 0x8a, 0xf9, 0x14, 0xba, 0x03, 0xff, 0x5b, 0xf4, 0x47, 0x89,
	0x69, 0x74, 0x1b, 0x36, 0x62, 0x80, 0xe7, 0x07, 0x2a, 0x16, 0x7b, 0x12, 0xe6, 0x33, 0xa8, 0x0e,
	0xd5, 0xa5, 0xa1, 0x28, 0x3d, 0x1b, 0xe3, 0x17, 0x09, 0xf6, 0xc9, 0x5f, 0xbd, 0xd6, 0x3a, 0x2a,
	0x26, 0x6d, 0xb5, 0x47, 0xf8, 0x1c, 0x6a, 0xc0, 0xfd, 0x6b, 0x00, 0x11, 0x55, 0x1e, 0xd5, 0x60,
	0x33, 0x42, 0xf6, 0x64, 0x65, 0xbf, 0x1b, 0xe7, 0x2a, 0xa0, 0x07, 0xb0, 0x75, 0x1d, 0x22, 0x22,
	0x03, 0x74, 0x1f, 0x6a, 0x0b, 0x65, 0xf1, 0x81, 0xb6, 0xdb, 0x51, 0xd4, 0x1e, 0x39, 0x08, 0x52,
	0xf8, 0x15, 0xf4, 0x19, 0x34, 0xae, 0x43, 0xa9, 0x78, 0x8e, 0xb3, 0x88, 0xb6, 0xe0, 0xee, 0x62,
	0xf9, 0xcb, 0xa4, 0x25, 0xd4, 0x84, 0xed, 0x7f, 0x84, 0x45, 0xb4, 0xab, 0x8b, 0x2d, 0xc2, 0xb2,
	0x84, 0x89, 0xd6, 0x96, 0x24, 0x82, 0x15, 0x85, 0x5f, 0x8b, 0x49, 0xb8, 0x08, 0x88, 0xa8, 0x78,
	0x54, 0x85, 0x4a, 0x0c, 0x29, 0xf6, 0x64, 0x95, 0xb4, 0x45, 0x55, 0x93, 0xdb, 0x5d, 0xcc, 0xdf,
	0x40, 0x9f, 0xc2, 0xbd, 0xab, 0xe3, 0x11, 0x11, 0x42, 0x9b, 0x20, 0xc4, 0x5b, 0xdf, 0x56, 0xc5,
	0xdd, 0x70, 0xa8, 0xca, 0x31, 0x21, 0x2e, 0x45, 0x23, 0x92, 0x75, 0x54, 0x81, 0x9b, 0x91, 0x10,
	0xed, 0xbd, 0xbd, 0x59, 0x39, 0x7e, 0x63, 0xfb, 0x13, 0x40, 0x8b, 0x2f, 0x73, 0x94, 0x85, 0x64,
	0xef, 0x15, 0x9f, 0x40, 0x79, 0x48, 0xbf, 0x68, 0x77, 0xf6, 0x78, 0x6e, 0xfb, 0x57, 0x0e, 0x8a,
	0xe1, 0x77, 0x4b, 0xf1, 0x74, 0xcf, 0xff, 0x2f, 0xda, 0xe8, 0x93, 0x9e, 0xe8, 0x3f, 0x38, 0x2b,
	0xc8, 0xfa, 0xe6, 0xaf, 0xcd, 0x42, 0x88, 0xec, 0xcb, 0x72, 0x47, 0x7e, 0xc9, 0x16, 0x27, 0x1e,
	0xc2, 0x6f, 0xfa, 0x1d, 0xe2, 0x2f, 0xce, 0x26, 0x08, 0xf1, 0x88, 0xfa, 0x46, 0x53, 0x3b, 0x5d,
	0xdc, 0xdb, 0x57, 0xf9, 0x94, 0x3f, 0x93, 0x97, 0xab, 0xf5, 0x14, 0x45, 0x7b, 0xd1, 0x91, 0x3b,
	0xca, 0x2e, 0x96, 0xf8, 0xf4, 0x62, 0x7e, 0x88, 0xf0, 0xaf, 0x9f, 0x69, 0xed, 0x41, 0x56, 0x94,
	0xba, 0xc4, 0x1e, 0xa0, 0xe7, 0xb0, 0x2a, 0x4a, 0x5d, 0xd1, 0x32, 0xcd, 0xe3, 0xc9, 0x68, 0xe0,
	0x3f, 0xc9, 0x7a, 0xec, 0xc7, 0x35, 0xfc, 0xe3, 0xad, 0x2c, 0xf5, 0xd6, 0x13, 0x0d, 0xee, 0x11,
	0xf7, 0x9c, 0xfc, 0x76, 0x5e, 0xe5, 0x3e, 0x9c, 0x57, 0xb9, 0xbf, 0xce, 0xab, 0xdc, 0xfb, 0x8b,
	0x6a, 0xe2, 0xc3, 0x45, 0x35, 0xf1, 0xfb, 0x45, 0x35, 0xf1, 0xc3, 0xe3, 0xe0, 0x2b, 0x60, 0xea,
	0x47, 0xd4, 0x69, 0x5a, 0xce, 0x70, 0x27, 0x32, 0x77, 0x4e, 0xcc, 0x87, 0x8c, 0xf1, 0xe1, 0xd0,
	0xda, 0x39, 0x31, 0x35, 0x73, 0xe8, 0xec, 0xd8, 0x6f, 0x77, 0x82, 0x1f, 0xef, 0xa1, 0xf5, 0x36,
	0x1b, 0x1c, 0xbe, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x60, 0x1a, 0x82, 0x96, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDMRpcClient is the client API for CDMRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDMRpcClient interface {
	CDMCommunicate(ctx context.Context, opts ...grpc.CallOption) (CDMRpc_CDMCommunicateClient, error)
}

type cDMRpcClient struct {
	cc *grpc.ClientConn
}

func NewCDMRpcClient(cc *grpc.ClientConn) CDMRpcClient {
	return &cDMRpcClient{cc}
}

func (c *cDMRpcClient) CDMCommunicate(ctx context.Context, opts ...grpc.CallOption) (CDMRpc_CDMCommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDMRpc_serviceDesc.Streams[0], "/dockergo.CDMRpc/CDMCommunicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDMRpcCDMCommunicateClient{stream}
	return x, nil
}

type CDMRpc_CDMCommunicateClient interface {
	Send(*CDMMessage) error
	Recv() (*CDMMessage, error)
	grpc.ClientStream
}

type cDMRpcCDMCommunicateClient struct {
	grpc.ClientStream
}

func (x *cDMRpcCDMCommunicateClient) Send(m *CDMMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDMRpcCDMCommunicateClient) Recv() (*CDMMessage, error) {
	m := new(CDMMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDMRpcServer is the server API for CDMRpc service.
type CDMRpcServer interface {
	CDMCommunicate(CDMRpc_CDMCommunicateServer) error
}

// UnimplementedCDMRpcServer can be embedded to have forward compatible implementations.
type UnimplementedCDMRpcServer struct {
}

func (*UnimplementedCDMRpcServer) CDMCommunicate(srv CDMRpc_CDMCommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method CDMCommunicate not implemented")
}

func RegisterCDMRpcServer(s *grpc.Server, srv CDMRpcServer) {
	s.RegisterService(&_CDMRpc_serviceDesc, srv)
}

func _CDMRpc_CDMCommunicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDMRpcServer).CDMCommunicate(&cDMRpcCDMCommunicateServer{stream})
}

type CDMRpc_CDMCommunicateServer interface {
	Send(*CDMMessage) error
	Recv() (*CDMMessage, error)
	grpc.ServerStream
}

type cDMRpcCDMCommunicateServer struct {
	grpc.ServerStream
}

func (x *cDMRpcCDMCommunicateServer) Send(m *CDMMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDMRpcCDMCommunicateServer) Recv() (*CDMMessage, error) {
	m := new(CDMMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CDMRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dockergo.CDMRpc",
	HandlerType: (*CDMRpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CDMCommunicate",
			Handler:       _CDMRpc_CDMCommunicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cdm_message.proto",
}

func (m *CDMMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDMMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDMMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.TxResponse != nil {
		{
			size, err := m.TxResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCdmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TxRequest != nil {
		{
			size, err := m.TxRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCdmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultCode != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TxContext != nil {
		{
			size, err := m.TxContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCdmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parameters) > 0 {
		for k := range m.Parameters {
			v := m.Parameters[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCdmMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCdmMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalProcessName) > 0 {
		i -= len(m.OriginalProcessName)
		copy(dAtA[i:], m.OriginalProcessName)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.OriginalProcessName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReadMap) > 0 {
		for k := range m.ReadMap {
			v := m.ReadMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCdmMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCdmMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WriteMap) > 0 {
		for k := range m.WriteMap {
			v := m.WriteMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCdmMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCdmMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxElapsedTime != nil {
		{
			size, err := m.TxElapsedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCdmMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReadMap) > 0 {
		for k := range m.ReadMap {
			v := m.ReadMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCdmMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCdmMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCdmMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.WriteMap) > 0 {
		for k := range m.WriteMap {
			v := m.WriteMap[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintCdmMessage(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCdmMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DockerContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DockerContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DockerContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCdmMessage(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxElapsedTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxElapsedTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxElapsedTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrossCallTime != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.CrossCallTime))
		i--
		dAtA[i] = 0x10
	}
	if m.CrossCallCnt != 0 {
		i = encodeVarintCdmMessage(dAtA, i, uint64(m.CrossCallCnt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCdmMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovCdmMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CDMMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCdmMessage(uint64(m.Type))
	}
	if m.ResultCode != 0 {
		n += 1 + sovCdmMessage(uint64(m.ResultCode))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if m.TxRequest != nil {
		l = m.TxRequest.Size()
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if m.TxResponse != nil {
		l = m.TxResponse.Size()
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	return n
}

func (m *TxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCdmMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCdmMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCdmMessage(uint64(mapEntrySize))
		}
	}
	if m.TxContext != nil {
		l = m.TxContext.Size()
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	return n
}

func (m *TxContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovCdmMessage(uint64(m.CurrentHeight))
	}
	if len(m.WriteMap) > 0 {
		for k, v := range m.WriteMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCdmMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCdmMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCdmMessage(uint64(mapEntrySize))
		}
	}
	if len(m.ReadMap) > 0 {
		for k, v := range m.ReadMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCdmMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCdmMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCdmMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.OriginalProcessName)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	return n
}

func (m *TxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovCdmMessage(uint64(m.Code))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if len(m.WriteMap) > 0 {
		for k, v := range m.WriteMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCdmMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCdmMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCdmMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCdmMessage(uint64(l))
		}
	}
	if len(m.ReadMap) > 0 {
		for k, v := range m.ReadMap {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovCdmMessage(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovCdmMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCdmMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if m.TxElapsedTime != nil {
		l = m.TxElapsedTime.Size()
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	return n
}

func (m *DockerContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovCdmMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovCdmMessage(uint64(l))
		}
	}
	return n
}

func (m *TxElapsedTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossCallCnt != 0 {
		n += 1 + sovCdmMessage(uint64(m.CrossCallCnt))
	}
	if m.CrossCallTime != 0 {
		n += 1 + sovCdmMessage(uint64(m.CrossCallTime))
	}
	return n
}

func sovCdmMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCdmMessage(x uint64) (n int) {
	return sovCdmMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CDMMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDMMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDMMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CDMType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxRequest == nil {
				m.TxRequest = &TxRequest{}
			}
			if err := m.TxRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxResponse == nil {
				m.TxResponse = &TxResponse{}
			}
			if err := m.TxResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdmMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCdmMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxContext == nil {
				m.TxContext = &TxContext{}
			}
			if err := m.TxContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteMap == nil {
				m.WriteMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdmMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCdmMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WriteMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadMap == nil {
				m.ReadMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdmMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCdmMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReadMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalProcessName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ContractResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteMap == nil {
				m.WriteMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdmMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCdmMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WriteMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &DockerContractEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadMap == nil {
				m.ReadMap = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdmMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdmMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthCdmMessage
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCdmMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCdmMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReadMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxElapsedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxElapsedTime == nil {
				m.TxElapsedTime = &TxElapsedTime{}
			}
			if err := m.TxElapsedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DockerContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DockerContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DockerContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCdmMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxElapsedTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxElapsedTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxElapsedTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossCallCnt", wireType)
			}
			m.CrossCallCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossCallCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossCallTime", wireType)
			}
			m.CrossCallTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossCallTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdmMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCdmMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCdmMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCdmMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdmMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCdmMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCdmMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCdmMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCdmMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCdmMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCdmMessage = fmt.Errorf("proto: unexpected end of group")
)
