// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package protocol is a generated GoMock package.
package protocol

import (
	reflect "reflect"

	security "chainmaker.org/chainmaker/vm-docker-go/v3/vm_mgr/module/security"
	tx_requests "chainmaker.org/chainmaker/vm-docker-go/v3/vm_mgr/module/tx_requests"
	protogo "chainmaker.org/chainmaker/vm-docker-go/v3/vm_mgr/pb/protogo"
	protogo0 "chainmaker.org/chainmaker/vm-docker-go/v3/vm_mgr/pb_sdk/protogo"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// AddTxCallContractElapsedTime mocks base method.
func (m *MockScheduler) AddTxCallContractElapsedTime(txId string, sysCallElapsedTime *tx_requests.SysCallElapsedTime) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTxCallContractElapsedTime", txId, sysCallElapsedTime)
}

// AddTxCallContractElapsedTime indicates an expected call of AddTxCallContractElapsedTime.
func (mr *MockSchedulerMockRecorder) AddTxCallContractElapsedTime(txId, sysCallElapsedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxCallContractElapsedTime", reflect.TypeOf((*MockScheduler)(nil).AddTxCallContractElapsedTime), txId, sysCallElapsedTime)
}

// AddTxSysCallElapsedTime mocks base method.
func (m *MockScheduler) AddTxSysCallElapsedTime(txId string, sysCallElapsedTime *tx_requests.SysCallElapsedTime) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTxSysCallElapsedTime", txId, sysCallElapsedTime)
}

// AddTxSysCallElapsedTime indicates an expected call of AddTxSysCallElapsedTime.
func (mr *MockSchedulerMockRecorder) AddTxSysCallElapsedTime(txId, sysCallElapsedTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxSysCallElapsedTime", reflect.TypeOf((*MockScheduler)(nil).AddTxSysCallElapsedTime), txId, sysCallElapsedTime)
}

// GetByteCodeReqCh mocks base method.
func (m *MockScheduler) GetByteCodeReqCh() chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByteCodeReqCh")
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetByteCodeReqCh indicates an expected call of GetByteCodeReqCh.
func (mr *MockSchedulerMockRecorder) GetByteCodeReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByteCodeReqCh", reflect.TypeOf((*MockScheduler)(nil).GetByteCodeReqCh))
}

// GetCrossContractReqCh mocks base method.
func (m *MockScheduler) GetCrossContractReqCh() chan *protogo.TxRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossContractReqCh")
	ret0, _ := ret[0].(chan *protogo.TxRequest)
	return ret0
}

// GetCrossContractReqCh indicates an expected call of GetCrossContractReqCh.
func (mr *MockSchedulerMockRecorder) GetCrossContractReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossContractReqCh", reflect.TypeOf((*MockScheduler)(nil).GetCrossContractReqCh))
}

// GetCrossContractResponseCh mocks base method.
func (m *MockScheduler) GetCrossContractResponseCh(chainId, responseId string) chan *protogo0.DMSMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrossContractResponseCh", chainId, responseId)
	ret0, _ := ret[0].(chan *protogo0.DMSMessage)
	return ret0
}

// GetCrossContractResponseCh indicates an expected call of GetCrossContractResponseCh.
func (mr *MockSchedulerMockRecorder) GetCrossContractResponseCh(chainId, responseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrossContractResponseCh", reflect.TypeOf((*MockScheduler)(nil).GetCrossContractResponseCh), chainId, responseId)
}

// GetGetStateReqCh mocks base method.
func (m *MockScheduler) GetGetStateReqCh() chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGetStateReqCh")
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetGetStateReqCh indicates an expected call of GetGetStateReqCh.
func (mr *MockSchedulerMockRecorder) GetGetStateReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGetStateReqCh", reflect.TypeOf((*MockScheduler)(nil).GetGetStateReqCh))
}

// GetResponseChByTxId mocks base method.
func (m *MockScheduler) GetResponseChByTxId(chainId, txId string) chan *protogo.CDMMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseChByTxId", chainId, txId)
	ret0, _ := ret[0].(chan *protogo.CDMMessage)
	return ret0
}

// GetResponseChByTxId indicates an expected call of GetResponseChByTxId.
func (mr *MockSchedulerMockRecorder) GetResponseChByTxId(chainId, txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseChByTxId", reflect.TypeOf((*MockScheduler)(nil).GetResponseChByTxId), chainId, txId)
}

// GetTxElapsedTime mocks base method.
func (m *MockScheduler) GetTxElapsedTime(txId string) *tx_requests.TxElapsedTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxElapsedTime", txId)
	ret0, _ := ret[0].(*tx_requests.TxElapsedTime)
	return ret0
}

// GetTxElapsedTime indicates an expected call of GetTxElapsedTime.
func (mr *MockSchedulerMockRecorder) GetTxElapsedTime(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxElapsedTime", reflect.TypeOf((*MockScheduler)(nil).GetTxElapsedTime), txId)
}

// GetTxReqCh mocks base method.
func (m *MockScheduler) GetTxReqCh() chan *protogo.TxRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxReqCh")
	ret0, _ := ret[0].(chan *protogo.TxRequest)
	return ret0
}

// GetTxReqCh indicates an expected call of GetTxReqCh.
func (mr *MockSchedulerMockRecorder) GetTxReqCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxReqCh", reflect.TypeOf((*MockScheduler)(nil).GetTxReqCh))
}

// GetTxResponseCh mocks base method.
func (m *MockScheduler) GetTxResponseCh() chan *protogo.TxResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxResponseCh")
	ret0, _ := ret[0].(chan *protogo.TxResponse)
	return ret0
}

// GetTxResponseCh indicates an expected call of GetTxResponseCh.
func (mr *MockSchedulerMockRecorder) GetTxResponseCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxResponseCh", reflect.TypeOf((*MockScheduler)(nil).GetTxResponseCh))
}

// RegisterCrossContractResponseCh mocks base method.
func (m *MockScheduler) RegisterCrossContractResponseCh(chainId, responseId string, responseCh chan *protogo0.DMSMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCrossContractResponseCh", chainId, responseId, responseCh)
}

// RegisterCrossContractResponseCh indicates an expected call of RegisterCrossContractResponseCh.
func (mr *MockSchedulerMockRecorder) RegisterCrossContractResponseCh(chainId, responseId, responseCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCrossContractResponseCh", reflect.TypeOf((*MockScheduler)(nil).RegisterCrossContractResponseCh), chainId, responseId, responseCh)
}

// RegisterResponseCh mocks base method.
func (m *MockScheduler) RegisterResponseCh(chainId, txId string, responseCh chan *protogo.CDMMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterResponseCh", chainId, txId, responseCh)
}

// RegisterResponseCh indicates an expected call of RegisterResponseCh.
func (mr *MockSchedulerMockRecorder) RegisterResponseCh(chainId, txId, responseCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterResponseCh", reflect.TypeOf((*MockScheduler)(nil).RegisterResponseCh), chainId, txId, responseCh)
}

// RegisterTxElapsedTime mocks base method.
func (m *MockScheduler) RegisterTxElapsedTime(txRequest *protogo.TxRequest, startTime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTxElapsedTime", txRequest, startTime)
}

// RegisterTxElapsedTime indicates an expected call of RegisterTxElapsedTime.
func (mr *MockSchedulerMockRecorder) RegisterTxElapsedTime(txRequest, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTxElapsedTime", reflect.TypeOf((*MockScheduler)(nil).RegisterTxElapsedTime), txRequest, startTime)
}

// RemoveTxElapsedTime mocks base method.
func (m *MockScheduler) RemoveTxElapsedTime(txId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTxElapsedTime", txId)
}

// RemoveTxElapsedTime indicates an expected call of RemoveTxElapsedTime.
func (mr *MockSchedulerMockRecorder) RemoveTxElapsedTime(txId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTxElapsedTime", reflect.TypeOf((*MockScheduler)(nil).RemoveTxElapsedTime), txId)
}

// ReturnErrorCrossContractResponse mocks base method.
func (m *MockScheduler) ReturnErrorCrossContractResponse(txRequest *protogo.TxRequest, resp *protogo0.DMSMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReturnErrorCrossContractResponse", txRequest, resp)
}

// ReturnErrorCrossContractResponse indicates an expected call of ReturnErrorCrossContractResponse.
func (mr *MockSchedulerMockRecorder) ReturnErrorCrossContractResponse(txRequest, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnErrorCrossContractResponse", reflect.TypeOf((*MockScheduler)(nil).ReturnErrorCrossContractResponse), txRequest, resp)
}

// ReturnErrorResponse mocks base method.
func (m *MockScheduler) ReturnErrorResponse(chainId, txId, errMsg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReturnErrorResponse", chainId, txId, errMsg)
}

// ReturnErrorResponse indicates an expected call of ReturnErrorResponse.
func (mr *MockSchedulerMockRecorder) ReturnErrorResponse(chainId, txId, errMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnErrorResponse", reflect.TypeOf((*MockScheduler)(nil).ReturnErrorResponse), chainId, txId, errMsg)
}

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// FreeUser mocks base method.
func (m *MockUserController) FreeUser(user *security.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeUser indicates an expected call of FreeUser.
func (mr *MockUserControllerMockRecorder) FreeUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeUser", reflect.TypeOf((*MockUserController)(nil).FreeUser), user)
}

// GetAvailableUser mocks base method.
func (m *MockUserController) GetAvailableUser() (*security.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableUser")
	ret0, _ := ret[0].(*security.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableUser indicates an expected call of GetAvailableUser.
func (mr *MockUserControllerMockRecorder) GetAvailableUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableUser", reflect.TypeOf((*MockUserController)(nil).GetAvailableUser))
}
